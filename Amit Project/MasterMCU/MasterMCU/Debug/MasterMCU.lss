
MasterMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  000008f2  00000986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000e4  008000e4  00000a0a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001160  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116c  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083d  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbb  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000874  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3e       	cpi	r26, 0xE4	; 228
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ee       	ldi	r26, 0xE4	; 228
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3e       	cpi	r26, 0xEF	; 239
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
  8a:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BTN_Init>:

void BTN_Init()
{
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		Dio_InitPortDirection(PortName, 0x00, (0x01<<a));
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
		BtnState[a] = STAT_OPEN;
  9c:	10 92 e4 00 	sts	0x00E4, r1

void BTN_Init()
{
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		Dio_InitPortDirection(PortName, 0x00, (0x01<<a));
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
		BtnState[a] = STAT_OPEN;
  aa:	10 92 e5 00 	sts	0x00E5, r1

void BTN_Init()
{
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		Dio_InitPortDirection(PortName, 0x00, (0x01<<a));
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	44 e0       	ldi	r20, 0x04	; 4
  b4:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
		BtnState[a] = STAT_OPEN;
  b8:	10 92 e6 00 	sts	0x00E6, r1
	}
}
  bc:	08 95       	ret

000000be <BTN_Read>:

u8 BTN_Read()
{
  be:	7f 92       	push	r7
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_CLOSED:
			BtnVal = BTN_INACTIVE;
  d8:	c4 ee       	ldi	r28, 0xE4	; 228
  da:	d0 e0       	ldi	r29, 0x00	; 0
		BtnState[a] = STAT_OPEN;
	}
}

u8 BTN_Read()
{
  dc:	ee 24       	eor	r14, r14
  de:	ff 24       	eor	r15, r15
	u8 x = 0, BtnVal = 0, PinVal = 0;
  e0:	00 e0       	ldi	r16, 0x00	; 0
	
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		BtnVal = BTN_INACTIVE;
		PinVal = Dio_ReadPort(PortName, (0x01<<a));
  e2:	aa 24       	eor	r10, r10
  e4:	bb 24       	eor	r11, r11
  e6:	a3 94       	inc	r10
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_RIS_EDGE:
			BtnVal = BTN_ACTIVE;
  e8:	88 24       	eor	r8, r8
  ea:	83 94       	inc	r8
			if(PinVal == (0x01<<a))
			{
				BtnState[a] = STAT_CLOSED;
  ec:	77 24       	eor	r7, r7
  ee:	68 94       	set
  f0:	71 f8       	bld	r7, 1
		PinVal = Dio_ReadPort(PortName, (0x01<<a));
		
		switch (BtnState[a])
		{
			case STAT_OPEN:
			BtnVal = BTN_INACTIVE;
  f2:	99 24       	eor	r9, r9
	u8 x = 0, BtnVal = 0, PinVal = 0;
	
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		BtnVal = BTN_INACTIVE;
		PinVal = Dio_ReadPort(PortName, (0x01<<a));
  f4:	1e 2d       	mov	r17, r14
  f6:	65 01       	movw	r12, r10
  f8:	0e 2c       	mov	r0, r14
  fa:	02 c0       	rjmp	.+4      	; 0x100 <BTN_Read+0x42>
  fc:	cc 0c       	add	r12, r12
  fe:	dd 1c       	adc	r13, r13
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <BTN_Read+0x3e>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	6c 2d       	mov	r22, r12
 108:	0e 94 2d 01 	call	0x25a	; 0x25a <Dio_ReadPort>
		
		switch (BtnState[a])
 10c:	98 81       	ld	r25, Y
 10e:	91 30       	cpi	r25, 0x01	; 1
 110:	79 f0       	breq	.+30     	; 0x130 <BTN_Read+0x72>
 112:	91 30       	cpi	r25, 0x01	; 1
 114:	18 f0       	brcs	.+6      	; 0x11c <BTN_Read+0x5e>
 116:	92 30       	cpi	r25, 0x02	; 2
 118:	e1 f4       	brne	.+56     	; 0x152 <BTN_Read+0x94>
 11a:	14 c0       	rjmp	.+40     	; 0x144 <BTN_Read+0x86>
		{
			case STAT_OPEN:
			BtnVal = BTN_INACTIVE;
			if(PinVal == (0x01<<a))
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	c8 16       	cp	r12, r24
 120:	d9 06       	cpc	r13, r25
 122:	19 f4       	brne	.+6      	; 0x12a <BTN_Read+0x6c>
			{
				BtnState[a] = STAT_RIS_EDGE;
 124:	88 82       	st	Y, r8
		PinVal = Dio_ReadPort(PortName, (0x01<<a));
		
		switch (BtnState[a])
		{
			case STAT_OPEN:
			BtnVal = BTN_INACTIVE;
 126:	89 2d       	mov	r24, r9
 128:	17 c0       	rjmp	.+46     	; 0x158 <BTN_Read+0x9a>
			{
				BtnState[a] = STAT_RIS_EDGE;
			}
			else
			{
				BtnState[a] = STAT_OPEN;
 12a:	18 82       	st	Y, r1
		PinVal = Dio_ReadPort(PortName, (0x01<<a));
		
		switch (BtnState[a])
		{
			case STAT_OPEN:
			BtnVal = BTN_INACTIVE;
 12c:	89 2d       	mov	r24, r9
 12e:	14 c0       	rjmp	.+40     	; 0x158 <BTN_Read+0x9a>
			}
			break;
			
			case STAT_RIS_EDGE:
			BtnVal = BTN_ACTIVE;
			if(PinVal == (0x01<<a))
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	c8 16       	cp	r12, r24
 134:	d9 06       	cpc	r13, r25
 136:	19 f4       	brne	.+6      	; 0x13e <BTN_Read+0x80>
			{
				BtnState[a] = STAT_CLOSED;
 138:	78 82       	st	Y, r7
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_RIS_EDGE:
			BtnVal = BTN_ACTIVE;
 13a:	88 2d       	mov	r24, r8
 13c:	0d c0       	rjmp	.+26     	; 0x158 <BTN_Read+0x9a>
			{
				BtnState[a] = STAT_CLOSED;
			}
			else
			{
				BtnState[a] = STAT_OPEN;
 13e:	18 82       	st	Y, r1
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_RIS_EDGE:
			BtnVal = BTN_ACTIVE;
 140:	88 2d       	mov	r24, r8
 142:	0a c0       	rjmp	.+20     	; 0x158 <BTN_Read+0x9a>
			}
			break;
			
			case STAT_CLOSED:
			BtnVal = BTN_INACTIVE;
			if(PinVal == (0x01<<a))
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	c8 16       	cp	r12, r24
 148:	d9 06       	cpc	r13, r25
 14a:	29 f0       	breq	.+10     	; 0x156 <BTN_Read+0x98>
			{
				BtnState[a] = STAT_CLOSED;
			}
			else
			{
				BtnState[a] = STAT_OPEN;
 14c:	18 82       	st	Y, r1
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_CLOSED:
			BtnVal = BTN_INACTIVE;
 14e:	89 2d       	mov	r24, r9
 150:	03 c0       	rjmp	.+6      	; 0x158 <BTN_Read+0x9a>
{
	u8 x = 0, BtnVal = 0, PinVal = 0;
	
	for(u8 a = 0 ; a<btn_num ; a++)
	{
		BtnVal = BTN_INACTIVE;
 152:	89 2d       	mov	r24, r9
 154:	01 c0       	rjmp	.+2      	; 0x158 <BTN_Read+0x9a>
				BtnState[a] = STAT_OPEN;
			}
			break;
			
			case STAT_CLOSED:
			BtnVal = BTN_INACTIVE;
 156:	89 2d       	mov	r24, r9
				BtnState[a] = STAT_OPEN;
			}
			break;
		}
		
		x = x | (BtnVal<<a);
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <BTN_Read+0xa2>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	1a 95       	dec	r17
 162:	e2 f7       	brpl	.-8      	; 0x15c <BTN_Read+0x9e>
 164:	08 2b       	or	r16, r24
 166:	08 94       	sec
 168:	e1 1c       	adc	r14, r1
 16a:	f1 1c       	adc	r15, r1
 16c:	21 96       	adiw	r28, 0x01	; 1

u8 BTN_Read()
{
	u8 x = 0, BtnVal = 0, PinVal = 0;
	
	for(u8 a = 0 ; a<btn_num ; a++)
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	e8 16       	cp	r14, r24
 172:	f1 04       	cpc	r15, r1
 174:	09 f0       	breq	.+2      	; 0x178 <BTN_Read+0xba>
 176:	be cf       	rjmp	.-132    	; 0xf4 <BTN_Read+0x36>
		}
		
		x = x | (BtnVal<<a);
	}
	return x;
}
 178:	80 2f       	mov	r24, r16
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	df 90       	pop	r13
 188:	cf 90       	pop	r12
 18a:	bf 90       	pop	r11
 18c:	af 90       	pop	r10
 18e:	9f 90       	pop	r9
 190:	8f 90       	pop	r8
 192:	7f 90       	pop	r7
 194:	08 95       	ret

00000196 <Dio_InitPortDirection>:
#define READ_REG(Reg,Mask) Reg & Mask

void Dio_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	//check the required port, specified bits and direction on the Data Direction Register
	switch(PortName)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	89 f0       	breq	.+34     	; 0x1bc <Dio_InitPortDirection+0x26>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <Dio_InitPortDirection+0x12>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	b9 f0       	breq	.+46     	; 0x1d0 <Dio_InitPortDirection+0x3a>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	41 f5       	brne	.+80     	; 0x1f6 <Dio_InitPortDirection+0x60>
 1a6:	1e c0       	rjmp	.+60     	; 0x1e4 <Dio_InitPortDirection+0x4e>
	{
		case PA:
			WRITE_REG(DDRA,PortDirection,PortMask);
 1a8:	8a b3       	in	r24, 0x1a	; 26
 1aa:	94 2f       	mov	r25, r20
 1ac:	90 95       	com	r25
 1ae:	89 23       	and	r24, r25
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	8a b3       	in	r24, 0x1a	; 26
 1b4:	64 23       	and	r22, r20
 1b6:	68 2b       	or	r22, r24
 1b8:	6a bb       	out	0x1a, r22	; 26
			break;
 1ba:	08 95       	ret
		
		case PB:
			WRITE_REG(DDRB,PortDirection,PortMask);
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	94 2f       	mov	r25, r20
 1c0:	90 95       	com	r25
 1c2:	89 23       	and	r24, r25
 1c4:	87 bb       	out	0x17, r24	; 23
 1c6:	87 b3       	in	r24, 0x17	; 23
 1c8:	64 23       	and	r22, r20
 1ca:	68 2b       	or	r22, r24
 1cc:	67 bb       	out	0x17, r22	; 23
			break;
 1ce:	08 95       	ret
			
		case PC:
			WRITE_REG(DDRC,PortDirection,PortMask);
 1d0:	84 b3       	in	r24, 0x14	; 20
 1d2:	94 2f       	mov	r25, r20
 1d4:	90 95       	com	r25
 1d6:	89 23       	and	r24, r25
 1d8:	84 bb       	out	0x14, r24	; 20
 1da:	84 b3       	in	r24, 0x14	; 20
 1dc:	64 23       	and	r22, r20
 1de:	68 2b       	or	r22, r24
 1e0:	64 bb       	out	0x14, r22	; 20
			break;
 1e2:	08 95       	ret
			
		case PD:
			WRITE_REG(DDRD,PortDirection,PortMask);
 1e4:	81 b3       	in	r24, 0x11	; 17
 1e6:	94 2f       	mov	r25, r20
 1e8:	90 95       	com	r25
 1ea:	89 23       	and	r24, r25
 1ec:	81 bb       	out	0x11, r24	; 17
 1ee:	81 b3       	in	r24, 0x11	; 17
 1f0:	64 23       	and	r22, r20
 1f2:	68 2b       	or	r22, r24
 1f4:	61 bb       	out	0x11, r22	; 17
 1f6:	08 95       	ret

000001f8 <Dio_WritePort>:
}

void Dio_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	//check the required port, specified bits and value on the Port Data Register
	switch(PortName)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	89 f0       	breq	.+34     	; 0x21e <Dio_WritePort+0x26>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	28 f0       	brcs	.+10     	; 0x20a <Dio_WritePort+0x12>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	b9 f0       	breq	.+46     	; 0x232 <Dio_WritePort+0x3a>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	41 f5       	brne	.+80     	; 0x258 <Dio_WritePort+0x60>
 208:	1e c0       	rjmp	.+60     	; 0x246 <Dio_WritePort+0x4e>
	{
		case PA:
			WRITE_REG(PORTA,PortData,PortMask);
 20a:	8b b3       	in	r24, 0x1b	; 27
 20c:	94 2f       	mov	r25, r20
 20e:	90 95       	com	r25
 210:	89 23       	and	r24, r25
 212:	8b bb       	out	0x1b, r24	; 27
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	64 23       	and	r22, r20
 218:	68 2b       	or	r22, r24
 21a:	6b bb       	out	0x1b, r22	; 27
			break;
 21c:	08 95       	ret
		
		case PB:
			WRITE_REG(PORTB,PortData,PortMask);
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	94 2f       	mov	r25, r20
 222:	90 95       	com	r25
 224:	89 23       	and	r24, r25
 226:	88 bb       	out	0x18, r24	; 24
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	64 23       	and	r22, r20
 22c:	68 2b       	or	r22, r24
 22e:	68 bb       	out	0x18, r22	; 24
			break;
 230:	08 95       	ret
		
		case PC:
			WRITE_REG(PORTC,PortData,PortMask);
 232:	85 b3       	in	r24, 0x15	; 21
 234:	94 2f       	mov	r25, r20
 236:	90 95       	com	r25
 238:	89 23       	and	r24, r25
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	64 23       	and	r22, r20
 240:	68 2b       	or	r22, r24
 242:	65 bb       	out	0x15, r22	; 21
			break;
 244:	08 95       	ret
		
		case PD:
			WRITE_REG(PORTD,PortData,PortMask);
 246:	82 b3       	in	r24, 0x12	; 18
 248:	94 2f       	mov	r25, r20
 24a:	90 95       	com	r25
 24c:	89 23       	and	r24, r25
 24e:	82 bb       	out	0x12, r24	; 18
 250:	82 b3       	in	r24, 0x12	; 18
 252:	64 23       	and	r22, r20
 254:	68 2b       	or	r22, r24
 256:	62 bb       	out	0x12, r22	; 18
 258:	08 95       	ret

0000025a <Dio_ReadPort>:

u8 Dio_ReadPort(u8 PortName,u8 PortMAsk)
{
	u8 x=0;
	//check the required port, specified bits and value from the Port input Register
	switch(PortName)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	51 f0       	breq	.+20     	; 0x272 <Dio_ReadPort+0x18>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	28 f0       	brcs	.+10     	; 0x26c <Dio_ReadPort+0x12>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	49 f0       	breq	.+18     	; 0x278 <Dio_ReadPort+0x1e>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	69 f4       	brne	.+26     	; 0x284 <Dio_ReadPort+0x2a>
 26a:	09 c0       	rjmp	.+18     	; 0x27e <Dio_ReadPort+0x24>
	{
		case PA:
			x = READ_REG(PINA,PortMAsk);
 26c:	89 b3       	in	r24, 0x19	; 25
 26e:	86 23       	and	r24, r22
			break;
 270:	08 95       	ret
		
		case PB:
			x = READ_REG(PINB,PortMAsk);
 272:	86 b3       	in	r24, 0x16	; 22
 274:	86 23       	and	r24, r22
			break;
 276:	08 95       	ret
		
		case PC:
			x = READ_REG(PINC,PortMAsk);
 278:	83 b3       	in	r24, 0x13	; 19
 27a:	86 23       	and	r24, r22
			break;
 27c:	08 95       	ret
		
		case PD:
			x = READ_REG(PIND,PortMAsk);
 27e:	80 b3       	in	r24, 0x10	; 16
 280:	86 23       	and	r24, r22
			break;
 282:	08 95       	ret
	}
}

u8 Dio_ReadPort(u8 PortName,u8 PortMAsk)
{
	u8 x=0;
 284:	80 e0       	ldi	r24, 0x00	; 0
		case PD:
			x = READ_REG(PIND,PortMAsk);
			break;
	}
	return x;
}
 286:	08 95       	ret

00000288 <Eeprom_Write>:
#include <avr/io.h>
#include "eeprom.h"

void Eeprom_Write (uint16_t address, uint8_t data) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
 288:	e1 99       	sbic	0x1c, 1	; 28
 28a:	fe cf       	rjmp	.-4      	; 0x288 <Eeprom_Write>
		;
	/* Set up address and data registers */
	EEAR = address;
 28c:	9f bb       	out	0x1f, r25	; 31
 28e:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 290:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
 292:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 294:	e1 9a       	sbi	0x1c, 1	; 28
}
 296:	08 95       	ret

00000298 <Eeprom_Read>:

uint8_t Eeprom_Read (uint16_t address) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
 298:	e1 99       	sbic	0x1c, 1	; 28
 29a:	fe cf       	rjmp	.-4      	; 0x298 <Eeprom_Read>
		;
	/* Set up address register */
	EEAR = address;
 29c:	9f bb       	out	0x1f, r25	; 31
 29e:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 2a0:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 2a2:	8d b3       	in	r24, 0x1d	; 29
 2a4:	08 95       	ret

000002a6 <I2c_WaitIntFlag>:
#define	MT_DATA_ACK	0x28
#define MR_SLA_ACK	0x40
#define	MR_DATA_ACK	0x58

static void I2c_WaitIntFlag (void) {
	while ( !(TWCR & (1<<TWINT)) );
 2a6:	06 b6       	in	r0, 0x36	; 54
 2a8:	07 fe       	sbrs	r0, 7
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <I2c_WaitIntFlag>
}
 2ac:	08 95       	ret

000002ae <I2c_ClearIntFlag>:

static void I2c_ClearIntFlag (void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
 2ae:	84 e8       	ldi	r24, 0x84	; 132
 2b0:	86 bf       	out	0x36, r24	; 54
}
 2b2:	08 95       	ret

000002b4 <I2c_Status>:

static uint8_t I2c_Status (void) {
	return (TWSR & 0xF8);
 2b4:	81 b1       	in	r24, 0x01	; 1
}
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	08 95       	ret

000002ba <I2c_Init>:

void I2c_Init (void) {
	// Set bit rate
	TWBR = 0x01;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 b9       	out	0x00, r24	; 0
	// Set pre-scaler to 0
	TWSR &= ~((1<<TWPS0) | (1<<TWPS1));
 2be:	81 b1       	in	r24, 0x01	; 1
 2c0:	8c 7f       	andi	r24, 0xFC	; 252
 2c2:	81 b9       	out	0x01, r24	; 1
}
 2c4:	08 95       	ret

000002c6 <I2c_Send1>:

int8_t I2c_Send1 (uint8_t slave, uint8_t data) {
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	c8 2f       	mov	r28, r24
 2cc:	d6 2f       	mov	r29, r22
	/* 1. Send Start */
	TWCR = START;
 2ce:	84 ea       	ldi	r24, 0xA4	; 164
 2d0:	86 bf       	out	0x36, r24	; 54
	I2c_WaitIntFlag();
 2d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != START_ACK)
 2d6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 2da:	88 30       	cpi	r24, 0x08	; 8
 2dc:	c9 f4       	brne	.+50     	; 0x310 <I2c_Send1+0x4a>
		return -1;
		
	/* 2. set slave address and issue a write command */
	TWDR = slave + W;
 2de:	c3 b9       	out	0x03, r28	; 3
	I2c_ClearIntFlag();	// to start Tx of address
 2e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2c_ClearIntFlag>
	I2c_WaitIntFlag();
 2e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != MT_SLA_ACK)
 2e8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 2ec:	88 31       	cpi	r24, 0x18	; 24
 2ee:	91 f4       	brne	.+36     	; 0x314 <I2c_Send1+0x4e>
		return -1;
		
	/* 3. send data packet */
	TWDR = data;
 2f0:	d3 b9       	out	0x03, r29	; 3
	I2c_ClearIntFlag();
 2f2:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2c_ClearIntFlag>
	I2c_WaitIntFlag();
 2f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != MT_DATA_ACK)
 2fa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 2fe:	88 32       	cpi	r24, 0x28	; 40
 300:	59 f4       	brne	.+22     	; 0x318 <I2c_Send1+0x52>
		return -1;
	
	/* 4. send Stop */
	TWCR = STOP;
 302:	84 e9       	ldi	r24, 0x94	; 148
 304:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWSTO)));
 306:	06 b6       	in	r0, 0x36	; 54
 308:	04 fc       	sbrc	r0, 4
 30a:	fd cf       	rjmp	.-6      	; 0x306 <I2c_Send1+0x40>
	return 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	05 c0       	rjmp	.+10     	; 0x31a <I2c_Send1+0x54>
int8_t I2c_Send1 (uint8_t slave, uint8_t data) {
	/* 1. Send Start */
	TWCR = START;
	I2c_WaitIntFlag();
	if (I2c_Status() != START_ACK)
		return -1;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	03 c0       	rjmp	.+6      	; 0x31a <I2c_Send1+0x54>
	/* 2. set slave address and issue a write command */
	TWDR = slave + W;
	I2c_ClearIntFlag();	// to start Tx of address
	I2c_WaitIntFlag();
	if (I2c_Status() != MT_SLA_ACK)
		return -1;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	01 c0       	rjmp	.+2      	; 0x31a <I2c_Send1+0x54>
	/* 3. send data packet */
	TWDR = data;
	I2c_ClearIntFlag();
	I2c_WaitIntFlag();
	if (I2c_Status() != MT_DATA_ACK)
		return -1;
 318:	8f ef       	ldi	r24, 0xFF	; 255
	
	/* 4. send Stop */
	TWCR = STOP;
	while((TWCR & (1<<TWSTO)));
	return 1;
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <I2c_Recv1>:

uint8_t I2c_Recv1 (uint8_t slave) {
 320:	cf 93       	push	r28
 322:	c8 2f       	mov	r28, r24
	uint8_t data;
	/* 1. Send Start */
	TWCR = START;
 324:	84 ea       	ldi	r24, 0xA4	; 164
 326:	86 bf       	out	0x36, r24	; 54
	I2c_WaitIntFlag();
 328:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != START_ACK)
 32c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	c9 f4       	brne	.+50     	; 0x366 <I2c_Recv1+0x46>
		return -1;
	
	/* 2. set slave address and issue a read command */
	TWDR = slave + R;
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	c3 b9       	out	0x03, r28	; 3
	I2c_ClearIntFlag();	// to start Tx of address
 338:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2c_ClearIntFlag>
	I2c_WaitIntFlag();
 33c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != MR_SLA_ACK)
 340:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 344:	80 34       	cpi	r24, 0x40	; 64
 346:	89 f4       	brne	.+34     	; 0x36a <I2c_Recv1+0x4a>
		return -1;
	
	/* 3. read data packet */
	I2c_ClearIntFlag();
 348:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2c_ClearIntFlag>
	I2c_WaitIntFlag();
 34c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2c_WaitIntFlag>
	if (I2c_Status() != MR_DATA_ACK)
 350:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2c_Status>
 354:	88 35       	cpi	r24, 0x58	; 88
 356:	59 f4       	brne	.+22     	; 0x36e <I2c_Recv1+0x4e>
		return -1;
	data = TWDR;
 358:	83 b1       	in	r24, 0x03	; 3
	
	/* 4. send Stop */
	TWCR = STOP;
 35a:	94 e9       	ldi	r25, 0x94	; 148
 35c:	96 bf       	out	0x36, r25	; 54
	while((TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
 35e:	06 b6       	in	r0, 0x36	; 54
 360:	04 fc       	sbrc	r0, 4
 362:	fd cf       	rjmp	.-6      	; 0x35e <I2c_Recv1+0x3e>
 364:	05 c0       	rjmp	.+10     	; 0x370 <I2c_Recv1+0x50>
	uint8_t data;
	/* 1. Send Start */
	TWCR = START;
	I2c_WaitIntFlag();
	if (I2c_Status() != START_ACK)
		return -1;
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	03 c0       	rjmp	.+6      	; 0x370 <I2c_Recv1+0x50>
	/* 2. set slave address and issue a read command */
	TWDR = slave + R;
	I2c_ClearIntFlag();	// to start Tx of address
	I2c_WaitIntFlag();
	if (I2c_Status() != MR_SLA_ACK)
		return -1;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	01 c0       	rjmp	.+2      	; 0x370 <I2c_Recv1+0x50>
	
	/* 3. read data packet */
	I2c_ClearIntFlag();
	I2c_WaitIntFlag();
	if (I2c_Status() != MR_DATA_ACK)
		return -1;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
	
	/* 4. send Stop */
	TWCR = STOP;
	while((TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
	return data;
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <Key_Init>:
};


void Key_Init(void)
{
	Dio_InitPortDirection(PC,0x00,0x07);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	47 e0       	ldi	r20, 0x07	; 7
 37a:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
	Dio_InitPortDirection(PC,0xff,0xf0);
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	6f ef       	ldi	r22, 0xFF	; 255
 382:	40 ef       	ldi	r20, 0xF0	; 240
 384:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
	Dio_WritePort(PC,0x00,0xf0);
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	40 ef       	ldi	r20, 0xF0	; 240
 38e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Dio_WritePort>
}
 392:	08 95       	ret

00000394 <Key_Scan>:


u8 Key_Scan(void)
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
	u8 column = 0, i = 0, k = 0, j = 0;
	
	while( Scan_Tab[i].direction != 0 )
 39e:	60 e1       	ldi	r22, 0x10	; 16
 3a0:	00 e0       	ldi	r16, 0x00	; 0
 3a2:	10 e0       	ldi	r17, 0x00	; 0
}


u8 Key_Scan(void)
{
	u8 column = 0, i = 0, k = 0, j = 0;
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
	
	while( Scan_Tab[i].direction != 0 )
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f0 e6       	ldi	r31, 0x60	; 96
 3aa:	ef 2e       	mov	r14, r31
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ff 2e       	mov	r15, r31
 3b0:	f0 2d       	mov	r31, r0
	{
		Dio_InitPortDirection(PC, Scan_Tab[i].direction, 0xf0);
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	40 ef       	ldi	r20, 0xF0	; 240
 3b6:	0e 94 cb 00 	call	0x196	; 0x196 <Dio_InitPortDirection>
		
		column = Dio_ReadPort(PC, 0x07);
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	0e 94 2d 01 	call	0x25a	; 0x25a <Dio_ReadPort>
		
		for(j=0; j<3; j++)
		{
			if((column & 0x01) == 0)
 3c2:	80 fd       	sbrc	r24, 0
 3c4:	2c c0       	rjmp	.+88     	; 0x41e <Key_Scan+0x8a>
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <Key_Scan+0x3c>
	{
		Dio_InitPortDirection(PC, Scan_Tab[i].direction, 0xf0);
		
		column = Dio_ReadPort(PC, 0x07);
		
		for(j=0; j<3; j++)
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <Key_Scan+0x3e>
		{
			if((column & 0x01) == 0)
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <Key_Scan+0x3e>
	{
		Dio_InitPortDirection(PC, Scan_Tab[i].direction, 0xf0);
		
		column = Dio_ReadPort(PC, 0x07);
		
		for(j=0; j<3; j++)
 3d0:	80 e0       	ldi	r24, 0x00	; 0
		{
			if((column & 0x01) == 0)
			{
				k = Scan_Tab[i].keyval[j];
 3d2:	f8 01       	movw	r30, r16
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e0 5a       	subi	r30, 0xA0	; 160
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	e8 0f       	add	r30, r24
 3e2:	f1 1d       	adc	r31, r1
 3e4:	c1 81       	ldd	r28, Z+1	; 0x01
				while (Dio_ReadPort(PC, 0x07) != 0x07); // Wait if key still pressed
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	0e 94 2d 01 	call	0x25a	; 0x25a <Dio_ReadPort>
 3ee:	87 30       	cpi	r24, 0x07	; 7
 3f0:	d1 f7       	brne	.-12     	; 0x3e6 <Key_Scan+0x52>
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <Key_Scan+0x7c>
				return k;
			}
			column = column >> 1;
		}
		
		i++;
 3f4:	cf 5f       	subi	r28, 0xFF	; 255

u8 Key_Scan(void)
{
	u8 column = 0, i = 0, k = 0, j = 0;
	
	while( Scan_Tab[i].direction != 0 )
 3f6:	0c 2f       	mov	r16, r28
 3f8:	10 e0       	ldi	r17, 0x00	; 0
 3fa:	f8 01       	movw	r30, r16
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	ee 0d       	add	r30, r14
 406:	ff 1d       	adc	r31, r15
 408:	60 81       	ld	r22, Z
 40a:	66 23       	and	r22, r22
 40c:	91 f6       	brne	.-92     	; 0x3b2 <Key_Scan+0x1e>
		}
		
		i++;
	}
	
	return k;
 40e:	c0 e0       	ldi	r28, 0x00	; 0
}
 410:	8c 2f       	mov	r24, r28
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	08 95       	ret
			{
				k = Scan_Tab[i].keyval[j];
				while (Dio_ReadPort(PC, 0x07) != 0x07); // Wait if key still pressed
				return k;
			}
			column = column >> 1;
 41e:	86 95       	lsr	r24
		
		column = Dio_ReadPort(PC, 0x07);
		
		for(j=0; j<3; j++)
		{
			if((column & 0x01) == 0)
 420:	80 ff       	sbrs	r24, 0
 422:	d2 cf       	rjmp	.-92     	; 0x3c8 <Key_Scan+0x34>
			{
				k = Scan_Tab[i].keyval[j];
				while (Dio_ReadPort(PC, 0x07) != 0x07); // Wait if key still pressed
				return k;
			}
			column = column >> 1;
 424:	86 95       	lsr	r24
		
		column = Dio_ReadPort(PC, 0x07);
		
		for(j=0; j<3; j++)
		{
			if((column & 0x01) == 0)
 426:	80 fd       	sbrc	r24, 0
 428:	e5 cf       	rjmp	.-54     	; 0x3f4 <Key_Scan+0x60>
 42a:	d0 cf       	rjmp	.-96     	; 0x3cc <Key_Scan+0x38>

0000042c <OutCmd>:
static u8 cursorPosition = 0x80;		// first row

// Private Function
static void OutCmd(u8 command) {
	// send Higher nibble
	LCD_DATA_PORT = command & 0xF0;
 42c:	98 2f       	mov	r25, r24
 42e:	90 7f       	andi	r25, 0xF0	; 240
 430:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 432:	98 b3       	in	r25, 0x18	; 24
 434:	91 7f       	andi	r25, 0xF1	; 241
 436:	98 bb       	out	0x18, r25	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 438:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 43a:	98 b3       	in	r25, 0x18	; 24
 43c:	91 7f       	andi	r25, 0xF1	; 241
 43e:	98 bb       	out	0x18, r25	; 24
	
	// send Lower nibble
	// PORTB &= 0x0F;	// clear Data bits
	LCD_DATA_PORT = (command << 4);
 440:	82 95       	swap	r24
 442:	80 7f       	andi	r24, 0xF0	; 240
 444:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 446:	88 b3       	in	r24, 0x18	; 24
 448:	81 7f       	andi	r24, 0xF1	; 241
 44a:	88 bb       	out	0x18, r24	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 44c:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 44e:	88 b3       	in	r24, 0x18	; 24
 450:	81 7f       	andi	r24, 0xF1	; 241
 452:	88 bb       	out	0x18, r24	; 24
	Timer_Wait(40);
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
}
 45c:	08 95       	ret

0000045e <LCD_GoToXY>:
==========================
00 01 02 03 04	...	26 27
40 41 42 43 44	...	66 67
*/
void LCD_GoToXY(u8 row, u8 column) {
	if (row < MAX_ROWS && column < MAX_COLUMNS) {
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	50 f4       	brcc	.+20     	; 0x476 <LCD_GoToXY+0x18>
 462:	60 31       	cpi	r22, 0x10	; 16
 464:	40 f4       	brcc	.+16     	; 0x476 <LCD_GoToXY+0x18>
		if (row != 0) {
 466:	81 11       	cpse	r24, r1
			column += 0x40;	// move to the second row
 468:	60 5c       	subi	r22, 0xC0	; 192
		}
		cursorPosition = column + 0x80;
 46a:	86 2f       	mov	r24, r22
 46c:	80 58       	subi	r24, 0x80	; 128
 46e:	80 93 74 00 	sts	0x0074, r24
		OutCmd(cursorPosition);
 472:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
 476:	08 95       	ret

00000478 <LCD_OutChar>:
	*/
}

void LCD_OutChar(u8 letter) {
	// letter is ASCII code
	LCD_CRL_PORT &= ~(RW);	// write enable
 478:	c2 98       	cbi	0x18, 2	; 24
	LCD_CRL_PORT |= (RS);	// for writing data
 47a:	c1 9a       	sbi	0x18, 1	; 24
	/* send Higher nibble */
	LCD_DATA_PORT = letter & 0xF0;
 47c:	98 2f       	mov	r25, r24
 47e:	90 7f       	andi	r25, 0xF0	; 240
 480:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 482:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 484:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 486:	c3 98       	cbi	0x18, 3	; 24
	
	/* send Lower nibble */
	LCD_DATA_PORT = (letter << 4);
 488:	82 95       	swap	r24
 48a:	80 7f       	andi	r24, 0xF0	; 240
 48c:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 48e:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 490:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 492:	c3 98       	cbi	0x18, 3	; 24
	Timer_Wait(40); // 40 us wait
 494:	88 e2       	ldi	r24, 0x28	; 40
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
	
	/* check the cursor position */
	cursorPosition++;
 49c:	80 91 74 00 	lds	r24, 0x0074
 4a0:	98 2f       	mov	r25, r24
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	90 93 74 00 	sts	0x0074, r25
	if(cursorPosition >= 0x80 + MAX_COLUMNS - 1 && cursorPosition < 0xC0) {
 4a8:	8e 58       	subi	r24, 0x8E	; 142
 4aa:	81 33       	cpi	r24, 0x31	; 49
 4ac:	40 f4       	brcc	.+16     	; 0x4be <LCD_OutChar+0x46>
		cursorPosition = 0xC0;
 4ae:	80 ec       	ldi	r24, 0xC0	; 192
 4b0:	80 93 74 00 	sts	0x0074, r24
		LCD_GoToXY(1, 0);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
 4bc:	08 95       	ret
	} else if (cursorPosition >= 0xC0 + MAX_COLUMNS -1) {
 4be:	9f 3c       	cpi	r25, 0xCF	; 207
 4c0:	38 f0       	brcs	.+14     	; 0x4d0 <LCD_OutChar+0x58>
		cursorPosition = 0x80;
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	80 93 74 00 	sts	0x0074, r24
		LCD_GoToXY(0, 0);
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
 4d0:	08 95       	ret

000004d2 <LCD_Clear>:
	}
}

void LCD_Clear(void) {
	cursorPosition = 0x80;
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	80 93 74 00 	sts	0x0074, r24
	OutCmd(0x01);		// Clear Display
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	Timer_Wait(1600);	// 1.6 ms wait
 4de:	80 e4       	ldi	r24, 0x40	; 64
 4e0:	96 e0       	ldi	r25, 0x06	; 6
 4e2:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
// 	OutCmd(0x02); // Cursor to home
// 	Timer_Wait(1600); // 1.6 ms wait
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
	Timer_Wait(1600); // 1.6 ms wait
 4ee:	80 e4       	ldi	r24, 0x40	; 64
 4f0:	96 e0       	ldi	r25, 0x06	; 6
 4f2:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
}
 4f6:	08 95       	ret

000004f8 <LCD_Init>:
		OutCmd(cursorPosition);
	}
}

void LCD_Init (void) {
	DDRA |= 0xF0;	// Init LCD port as outputs
 4f8:	8a b3       	in	r24, 0x1a	; 26
 4fa:	80 6f       	ori	r24, 0xF0	; 240
 4fc:	8a bb       	out	0x1a, r24	; 26
	DDRB |= E | RS | RW;
 4fe:	87 b3       	in	r24, 0x17	; 23
 500:	8e 60       	ori	r24, 0x0E	; 14
 502:	87 bb       	out	0x17, r24	; 23
	Timer_Init(); // 1us TCNT
 504:	0e 94 b7 03 	call	0x76e	; 0x76e <Timer_Init>
	/*** START INIT ***/
	Timer_Wait1ms(15); // 15 ms
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Timer_Wait1ms>
	OutCmd(0x03); // function set
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	Timer_Wait1ms(4); // 4 ms
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Timer_Wait1ms>
	OutCmd(0x03); // second time
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	Timer_Wait(100); // 100us
 524:	84 e6       	ldi	r24, 0x64	; 100
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
	OutCmd(0x03); // third time
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
		
	// now the busy flag could be read
	// 1. function set
	OutCmd(0x02);	// wasted as LCD initialized 8-bit by default
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	OutCmd(0x28); // 4bit, N=1 2line, F=0 5by7
 538:	88 e2       	ldi	r24, 0x28	; 40
 53a:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	// 2. Display off
	OutCmd(0x08); // D=0 display off, C=0 cursor off, B=0 blinking off
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	// 3. Display clear
	LCD_Clear();
 544:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
	// 4. Entry mode Set
	OutCmd(0x06); // Entry mode, I/D=1 Increment, S=0 no display shift
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	OutCmd(0x80);	// Set RAM address
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	/*** END INIT ***/
 	OutCmd(0x0E); // D=1 display on, C=1 cursor on, B=0 blink off
 554:	8e e0       	ldi	r24, 0x0E	; 14
 556:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
 	OutCmd(0x10); // S/C=0 cursor move, R/L=0 shift left
 55a:	80 e1       	ldi	r24, 0x10	; 16
 55c:	0e 94 16 02 	call	0x42c	; 0x42c <OutCmd>
	LCD_GoToXY(0, 0);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
		0	0 Shifts the cursor position to the left. (AC is decremented by one.)
		0	1 Shifts the cursor position to the right. (AC is incremented by one.)
		1	0 Shifts the entire display to the left. The cursor follows the display shift.
		1	1 Shifts the entire display to the right. The cursor follows the display shift.
	*/
}
 568:	08 95       	ret

0000056a <LCD_OutString>:
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
	while (*str) {
 570:	88 81       	ld	r24, Y
 572:	88 23       	and	r24, r24
 574:	31 f0       	breq	.+12     	; 0x582 <LCD_OutString+0x18>
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 576:	21 96       	adiw	r28, 0x01	; 1
	while (*str) {
		LCD_OutChar(*str);
 578:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_OutChar>
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
	while (*str) {
 57c:	89 91       	ld	r24, Y+
 57e:	88 23       	and	r24, r24
 580:	d9 f7       	brne	.-10     	; 0x578 <LCD_OutString+0xe>
		LCD_OutChar(*str);
		str++;
	}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <pass_scan>:
u8 Trials=0;
u8 n=1;

void pass_scan(u8 keyPressed)
{
	PassEntered[DigitsNumber] = keyPressed;
 588:	e0 91 e8 00 	lds	r30, 0x00E8
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	e5 51       	subi	r30, 0x15	; 21
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	80 83       	st	Z, r24
	
	LCD_OutChar('*');
 594:	8a e2       	ldi	r24, 0x2A	; 42
 596:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_OutChar>
	DigitsNumber++;
 59a:	80 91 e8 00 	lds	r24, 0x00E8
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 e8 00 	sts	0x00E8, r24
	
}
 5a4:	08 95       	ret

000005a6 <pass_check>:
u8 pass_check(void)
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cb ee       	ldi	r28, 0xEB	; 235
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
	
	LCD_OutChar('*');
	DigitsNumber++;
	
}
u8 pass_check(void)
 5b2:	8e 01       	movw	r16, r28
 5b4:	0c 5f       	subi	r16, 0xFC	; 252
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	for (int j=0;j<4;j++){
		UART_OutChar (PassEntered[j]);	
 5b8:	89 91       	ld	r24, Y+
 5ba:	0e 94 25 04 	call	0x84a	; 0x84a <UART_OutChar>
	DigitsNumber++;
	
}
u8 pass_check(void)
{
	for (int j=0;j<4;j++){
 5be:	c0 17       	cp	r28, r16
 5c0:	d1 07       	cpc	r29, r17
 5c2:	d1 f7       	brne	.-12     	; 0x5b8 <pass_check+0x12>
		UART_OutChar (PassEntered[j]);	
	}
	CheckResult=UART_InChar();
 5c4:	0e 94 29 04 	call	0x852	; 0x852 <UART_InChar>
 5c8:	80 93 ea 00 	sts	0x00EA, r24
	return CheckResult;	
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	08 95       	ret

000005d6 <pass_reset>:
void pass_reset(void)
{
	DigitsNumber=0;
 5d6:	10 92 e8 00 	sts	0x00E8, r1
	CheckResult=0;
 5da:	10 92 ea 00 	sts	0x00EA, r1
	LCD_Clear();
 5de:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
	LCD_GoToXY(0, 0);
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
	LCD_OutString("Enter Password: ");
 5ea:	85 e7       	ldi	r24, 0x75	; 117
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
	LCD_GoToXY(1, 7);
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	67 e0       	ldi	r22, 0x07	; 7
 5f6:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
}
 5fa:	08 95       	ret

000005fc <main>:
int main(void)
{	/* *** TEST KEYPad and LCD *** */
	UART_Init();
 5fc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <UART_Init>
	LCD_Init();
 600:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_Init>
	LCD_GoToXY(0, 0);
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
	LCD_OutString("Enter Password: ");
 60c:	85 e7       	ldi	r24, 0x75	; 117
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
	LCD_GoToXY(1, 7);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	67 e0       	ldi	r22, 0x07	; 7
 618:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
	Key_Init();
 61c:	0e 94 ba 01 	call	0x374	; 0x374 <Key_Init>
				 {
					
					 Trials=0;
					 LCD_Clear();
					 LCD_GoToXY(0, 0);
					 LCD_OutString("    WAITING");
 620:	01 ed       	ldi	r16, 0xD1	; 209
 622:	10 e0       	ldi	r17, 0x00	; 0
					 
					 for(int b=0;b<n;b++)
 624:	ee 24       	eor	r14, r14
 626:	ff 24       	eor	r15, r15
				 else if(CheckResult==WrongPass)
				 {
					 Trials++;
					 LCD_Clear();
					 LCD_GoToXY(0, 0);
					 LCD_OutString("Incorrect Pass!");
 628:	0f 2e       	mov	r0, r31
 62a:	f3 eb       	ldi	r31, 0xB3	; 179
 62c:	6f 2e       	mov	r6, r31
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	7f 2e       	mov	r7, r31
 632:	f0 2d       	mov	r31, r0
					 LCD_GoToXY(1, 0);
					 LCD_OutString("  Try again..");
 634:	0f 2e       	mov	r0, r31
 636:	f3 ec       	ldi	r31, 0xC3	; 195
 638:	4f 2e       	mov	r4, r31
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	5f 2e       	mov	r5, r31
 63e:	f0 2d       	mov	r31, r0
			 {		CheckResult=pass_check();	
				 if(CheckResult==CorrectPass)
				 {
					 LCD_Clear();
					 LCD_GoToXY(0, 0);
					 LCD_OutString("Correct Pass :)");
 640:	0f 2e       	mov	r0, r31
 642:	f6 e8       	ldi	r31, 0x86	; 134
 644:	cf 2e       	mov	r12, r31
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	df 2e       	mov	r13, r31
 64a:	f0 2d       	mov	r31, r0
					 Timer_Wait1ms (850); // wait n ms
					 LCD_Clear();
					 LCD_GoToXY(0, 0);
					 LCD_OutString("    WELCOME..");
 64c:	0f 2e       	mov	r0, r31
 64e:	f6 e9       	ldi	r31, 0x96	; 150
 650:	af 2e       	mov	r10, r31
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	bf 2e       	mov	r11, r31
 656:	f0 2d       	mov	r31, r0
					 LCD_GoToXY(1, 0);
					 LCD_OutString("  System Is On");
 658:	0f 2e       	mov	r0, r31
 65a:	f4 ea       	ldi	r31, 0xA4	; 164
 65c:	8f 2e       	mov	r8, r31
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	9f 2e       	mov	r9, r31
 662:	f0 2d       	mov	r31, r0
	LCD_GoToXY(0, 0);
	LCD_OutString("Enter Password: ");
	LCD_GoToXY(1, 7);
	Key_Init();
    while(1)
    {    keyPressed = Key_Scan();
 664:	0e 94 ca 01 	call	0x394	; 0x394 <Key_Scan>
 668:	80 93 e9 00 	sts	0x00E9, r24
		 if (keyPressed >= '0' && keyPressed <= '9')
 66c:	98 2f       	mov	r25, r24
 66e:	90 53       	subi	r25, 0x30	; 48
 670:	9a 30       	cpi	r25, 0x0A	; 10
 672:	08 f0       	brcs	.+2      	; 0x676 <main+0x7a>
 674:	6f c0       	rjmp	.+222    	; 0x754 <main+0x158>
		 {
			 pass_scan(keyPressed);
 676:	0e 94 c4 02 	call	0x588	; 0x588 <pass_scan>
			 if(DigitsNumber >= 4)
 67a:	80 91 e8 00 	lds	r24, 0x00E8
 67e:	84 30       	cpi	r24, 0x04	; 4
 680:	08 f4       	brcc	.+2      	; 0x684 <main+0x88>
 682:	6e c0       	rjmp	.+220    	; 0x760 <main+0x164>
			 {		CheckResult=pass_check();	
 684:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <pass_check>
 688:	80 93 ea 00 	sts	0x00EA, r24
				 if(CheckResult==CorrectPass)
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	f1 f4       	brne	.+60     	; 0x6cc <main+0xd0>
				 {
					 LCD_Clear();
 690:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
					 LCD_GoToXY(0, 0);
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("Correct Pass :)");
 69c:	c6 01       	movw	r24, r12
 69e:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
					 Timer_Wait1ms (850); // wait n ms
 6a2:	82 e5       	ldi	r24, 0x52	; 82
 6a4:	93 e0       	ldi	r25, 0x03	; 3
 6a6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Timer_Wait1ms>
					 LCD_Clear();
 6aa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
					 LCD_GoToXY(0, 0);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("    WELCOME..");
 6b6:	c5 01       	movw	r24, r10
 6b8:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
					 LCD_GoToXY(1, 0);
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("  System Is On");
 6c4:	c4 01       	movw	r24, r8
 6c6:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
 6ca:	1d c0       	rjmp	.+58     	; 0x706 <main+0x10a>
					 
				 }
				 else if(CheckResult==WrongPass)
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	d9 f4       	brne	.+54     	; 0x706 <main+0x10a>
				 {
					 Trials++;
 6d0:	80 91 e7 00 	lds	r24, 0x00E7
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	80 93 e7 00 	sts	0x00E7, r24
					 LCD_Clear();
 6da:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
					 LCD_GoToXY(0, 0);
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("Incorrect Pass!");
 6e6:	c3 01       	movw	r24, r6
 6e8:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
					 LCD_GoToXY(1, 0);
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("  Try again..");
 6f4:	c2 01       	movw	r24, r4
 6f6:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
					 Timer_Wait1ms (500); // wait n ms
 6fa:	84 ef       	ldi	r24, 0xF4	; 244
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Timer_Wait1ms>
					 pass_reset();
 702:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <pass_reset>
				 }
				 
				 if(Trials >= 3)
 706:	80 91 e7 00 	lds	r24, 0x00E7
 70a:	83 30       	cpi	r24, 0x03	; 3
 70c:	48 f1       	brcs	.+82     	; 0x760 <main+0x164>
				 {
					
					 Trials=0;
 70e:	10 92 e7 00 	sts	0x00E7, r1
					 LCD_Clear();
 712:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Clear>
					 LCD_GoToXY(0, 0);
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_GoToXY>
					 LCD_OutString("    WAITING");
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_OutString>
					 
					 for(int b=0;b<n;b++)
 724:	80 91 dd 00 	lds	r24, 0x00DD
 728:	88 23       	and	r24, r24
 72a:	61 f0       	breq	.+24     	; 0x744 <main+0x148>
 72c:	e7 01       	movw	r28, r14
					 Timer_Wait1ms	 (5000); // wait n ms
 72e:	88 e8       	ldi	r24, 0x88	; 136
 730:	93 e1       	ldi	r25, 0x13	; 19
 732:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Timer_Wait1ms>
					 Trials=0;
					 LCD_Clear();
					 LCD_GoToXY(0, 0);
					 LCD_OutString("    WAITING");
					 
					 for(int b=0;b<n;b++)
 736:	21 96       	adiw	r28, 0x01	; 1
 738:	80 91 dd 00 	lds	r24, 0x00DD
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	c8 17       	cp	r28, r24
 740:	d9 07       	cpc	r29, r25
 742:	ac f3       	brlt	.-22     	; 0x72e <main+0x132>
					 Timer_Wait1ms	 (5000); // wait n ms
					 
					 pass_reset();
 744:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <pass_reset>
					 n++;
 748:	80 91 dd 00 	lds	r24, 0x00DD
 74c:	8f 5f       	subi	r24, 0xFF	; 255
 74e:	80 93 dd 00 	sts	0x00DD, r24
 752:	06 c0       	rjmp	.+12     	; 0x760 <main+0x164>
				 }
			 }
		 }
		 else if (keyPressed == '*' || keyPressed == '#')
 754:	8a 32       	cpi	r24, 0x2A	; 42
 756:	11 f0       	breq	.+4      	; 0x75c <main+0x160>
 758:	83 32       	cpi	r24, 0x23	; 35
 75a:	11 f4       	brne	.+4      	; 0x760 <main+0x164>
		 {
			 pass_reset();
 75c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <pass_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 760:	83 ec       	ldi	r24, 0xC3	; 195
 762:	99 e0       	ldi	r25, 0x09	; 9
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <main+0x168>
 768:	00 c0       	rjmp	.+0      	; 0x76a <main+0x16e>
 76a:	00 00       	nop
 76c:	7b cf       	rjmp	.-266    	; 0x664 <main+0x68>

0000076e <Timer_Init>:
// Initialize TCNT to 1us
// Input: none
// Output: none
void Timer_Init (void)
{
	TCCR0 = 0x02;	// Normal Mode, Set pre-scaler at 8
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	83 bf       	out	0x33, r24	; 51
}
 772:	08 95       	ret

00000774 <Timer_Wait>:

// Input: delay time in 1us units
// Output: none
void Timer_Wait (u16 cycles)
{
	TCNT0 = 0;
 774:	12 be       	out	0x32, r1	; 50
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 776:	49 2f       	mov	r20, r25
 778:	55 27       	eor	r21, r21
 77a:	41 15       	cp	r20, r1
 77c:	51 05       	cpc	r21, r1
 77e:	51 f0       	breq	.+20     	; 0x794 <Timer_Wait+0x20>
 780:	20 e0       	ldi	r18, 0x00	; 0
 782:	30 e0       	ldi	r19, 0x00	; 0
		while (TCNT0 < 255);
 784:	62 b7       	in	r22, 0x32	; 50
 786:	6f 3f       	cpi	r22, 0xFF	; 255
 788:	e9 f7       	brne	.-6      	; 0x784 <Timer_Wait+0x10>
// Output: none
void Timer_Wait (u16 cycles)
{
	TCNT0 = 0;
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	24 17       	cp	r18, r20
 790:	35 07       	cpc	r19, r21
 792:	c1 f7       	brne	.-16     	; 0x784 <Timer_Wait+0x10>
		while (TCNT0 < 255);
	while (TCNT0 <= cycles % 256);
 794:	90 70       	andi	r25, 0x00	; 0
 796:	22 b7       	in	r18, 0x32	; 50
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	82 17       	cp	r24, r18
 79c:	93 07       	cpc	r25, r19
 79e:	d8 f7       	brcc	.-10     	; 0x796 <Timer_Wait+0x22>
}
 7a0:	08 95       	ret

000007a2 <Timer_Wait1ms>:

// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (unsigned short delay)
{
 7a2:	8f 92       	push	r8
 7a4:	9f 92       	push	r9
 7a6:	af 92       	push	r10
 7a8:	bf 92       	push	r11
 7aa:	cf 92       	push	r12
 7ac:	df 92       	push	r13
 7ae:	ef 92       	push	r14
 7b0:	ff 92       	push	r15
	unsigned long i;
	for (i = 0; i < (4 * delay); i++)
 7b2:	6c 01       	movw	r12, r24
 7b4:	cc 0c       	add	r12, r12
 7b6:	dd 1c       	adc	r13, r13
 7b8:	cc 0c       	add	r12, r12
 7ba:	dd 1c       	adc	r13, r13
 7bc:	ee 24       	eor	r14, r14
 7be:	ff 24       	eor	r15, r15
 7c0:	c1 14       	cp	r12, r1
 7c2:	d1 04       	cpc	r13, r1
 7c4:	e1 04       	cpc	r14, r1
 7c6:	f1 04       	cpc	r15, r1
 7c8:	89 f0       	breq	.+34     	; 0x7ec <Timer_Wait1ms+0x4a>
 7ca:	88 24       	eor	r8, r8
 7cc:	99 24       	eor	r9, r9
 7ce:	54 01       	movw	r10, r8
		Timer_Wait(250);
 7d0:	8a ef       	ldi	r24, 0xFA	; 250
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Wait>
// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (unsigned short delay)
{
	unsigned long i;
	for (i = 0; i < (4 * delay); i++)
 7d8:	08 94       	sec
 7da:	81 1c       	adc	r8, r1
 7dc:	91 1c       	adc	r9, r1
 7de:	a1 1c       	adc	r10, r1
 7e0:	b1 1c       	adc	r11, r1
 7e2:	8c 14       	cp	r8, r12
 7e4:	9d 04       	cpc	r9, r13
 7e6:	ae 04       	cpc	r10, r14
 7e8:	bf 04       	cpc	r11, r15
 7ea:	90 f3       	brcs	.-28     	; 0x7d0 <Timer_Wait1ms+0x2e>
		Timer_Wait(250);
 7ec:	ff 90       	pop	r15
 7ee:	ef 90       	pop	r14
 7f0:	df 90       	pop	r13
 7f2:	cf 90       	pop	r12
 7f4:	bf 90       	pop	r11
 7f6:	af 90       	pop	r10
 7f8:	9f 90       	pop	r9
 7fa:	8f 90       	pop	r8
 7fc:	08 95       	ret

000007fe <UART_Init>:
#define F_CPU	8000000UL

// Initialize ATmega UART channel
void UART_Init (void) {
	// set baud rate
	uint16_t BR = ((F_CPU/16/UART_Config.baud)-1);
 7fe:	20 91 de 00 	lds	r18, 0x00DE
 802:	30 91 df 00 	lds	r19, 0x00DF
 806:	40 91 e0 00 	lds	r20, 0x00E0
 80a:	50 91 e1 00 	lds	r21, 0x00E1
 80e:	60 e2       	ldi	r22, 0x20	; 32
 810:	71 ea       	ldi	r23, 0xA1	; 161
 812:	87 e0       	ldi	r24, 0x07	; 7
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodsi4>
 81a:	21 50       	subi	r18, 0x01	; 1
 81c:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (uint8_t)(BR>>8);
 81e:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8_t)BR;
 820:	29 b9       	out	0x09, r18	; 9
	// enable receiver and transmitter
	UCSRB = (1<<RXEN) | (1<<TXEN);
 822:	88 e1       	ldi	r24, 0x18	; 24
 824:	8a b9       	out	0x0a, r24	; 10
	// set frame format
	UCSRB |= ((UART_Config.charSize)>>3)<<UCSZ2;	// 9-bit character
 826:	2a b1       	in	r18, 0x0a	; 10
 828:	80 91 e2 00 	lds	r24, 0x00E2
 82c:	98 2f       	mov	r25, r24
 82e:	96 95       	lsr	r25
 830:	96 95       	lsr	r25
 832:	96 95       	lsr	r25
 834:	99 0f       	add	r25, r25
 836:	99 0f       	add	r25, r25
 838:	92 2b       	or	r25, r18
 83a:	9a b9       	out	0x0a, r25	; 10
	UCSRC = (1<<URSEL) | ((UART_Config.charSize)&~(1<<3)) | UART_Config.stopBits;
 83c:	90 91 e3 00 	lds	r25, 0x00E3
 840:	90 68       	ori	r25, 0x80	; 128
 842:	87 77       	andi	r24, 0x77	; 119
 844:	89 2b       	or	r24, r25
 846:	80 bd       	out	0x20, r24	; 32
}
 848:	08 95       	ret

0000084a <UART_OutChar>:

// wait for buffer to be empty,
// then output
void UART_OutChar (uint8_t data) {
	while ( !(UCSRA & (1<<UDRE)) )
 84a:	5d 9b       	sbis	0x0b, 5	; 11
 84c:	fe cf       	rjmp	.-4      	; 0x84a <UART_OutChar>
		;
	UDR = data;
 84e:	8c b9       	out	0x0c, r24	; 12
}
 850:	08 95       	ret

00000852 <UART_InChar>:

// Wait for new input
// then return ASCII code
uint8_t UART_InChar(void) {
	while ( !(UCSRA & (1<<RXC)) )
 852:	5f 9b       	sbis	0x0b, 7	; 11
 854:	fe cf       	rjmp	.-4      	; 0x852 <UART_InChar>
		;
	return UDR;
 856:	8c b1       	in	r24, 0x0c	; 12
}
 858:	08 95       	ret

0000085a <UART_OutWord>:

void UART_OutWord(uint16_t word) {
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
// 	UART_OutChar('0' + ((word / 1000) % 10));               /* Thousands */
// 	UART_OutChar('0' + ((word / 100) % 10));                 /* Hundreds */
// 	UART_OutChar('0' + ((word / 10) % 10));                      /* Tens */
// 	UART_OutChar('0' + (word % 10));                             /* Ones */
	
	if(word >= 10){
 85e:	8a 30       	cpi	r24, 0x0A	; 10
 860:	91 05       	cpc	r25, r1
 862:	48 f0       	brcs	.+18     	; 0x876 <__stack+0x17>
		UART_OutWord(word / 10);
 864:	6a e0       	ldi	r22, 0x0A	; 10
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	0e 94 41 04 	call	0x882	; 0x882 <__udivmodhi4>
 86c:	d8 2f       	mov	r29, r24
 86e:	cb 01       	movw	r24, r22
 870:	0e 94 2d 04 	call	0x85a	; 0x85a <UART_OutWord>
		word = word % 10;
 874:	8d 2f       	mov	r24, r29
	}
	UART_OutChar(word + '0'); /* n is between 0 and 9 */
 876:	80 5d       	subi	r24, 0xD0	; 208
 878:	0e 94 25 04 	call	0x84a	; 0x84a <UART_OutChar>
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <__udivmodhi4>:
 882:	aa 1b       	sub	r26, r26
 884:	bb 1b       	sub	r27, r27
 886:	51 e1       	ldi	r21, 0x11	; 17
 888:	07 c0       	rjmp	.+14     	; 0x898 <__udivmodhi4_ep>

0000088a <__udivmodhi4_loop>:
 88a:	aa 1f       	adc	r26, r26
 88c:	bb 1f       	adc	r27, r27
 88e:	a6 17       	cp	r26, r22
 890:	b7 07       	cpc	r27, r23
 892:	10 f0       	brcs	.+4      	; 0x898 <__udivmodhi4_ep>
 894:	a6 1b       	sub	r26, r22
 896:	b7 0b       	sbc	r27, r23

00000898 <__udivmodhi4_ep>:
 898:	88 1f       	adc	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	5a 95       	dec	r21
 89e:	a9 f7       	brne	.-22     	; 0x88a <__udivmodhi4_loop>
 8a0:	80 95       	com	r24
 8a2:	90 95       	com	r25
 8a4:	bc 01       	movw	r22, r24
 8a6:	cd 01       	movw	r24, r26
 8a8:	08 95       	ret

000008aa <__udivmodsi4>:
 8aa:	a1 e2       	ldi	r26, 0x21	; 33
 8ac:	1a 2e       	mov	r1, r26
 8ae:	aa 1b       	sub	r26, r26
 8b0:	bb 1b       	sub	r27, r27
 8b2:	fd 01       	movw	r30, r26
 8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <__udivmodsi4_ep>

000008b6 <__udivmodsi4_loop>:
 8b6:	aa 1f       	adc	r26, r26
 8b8:	bb 1f       	adc	r27, r27
 8ba:	ee 1f       	adc	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	a2 17       	cp	r26, r18
 8c0:	b3 07       	cpc	r27, r19
 8c2:	e4 07       	cpc	r30, r20
 8c4:	f5 07       	cpc	r31, r21
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__udivmodsi4_ep>
 8c8:	a2 1b       	sub	r26, r18
 8ca:	b3 0b       	sbc	r27, r19
 8cc:	e4 0b       	sbc	r30, r20
 8ce:	f5 0b       	sbc	r31, r21

000008d0 <__udivmodsi4_ep>:
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	1a 94       	dec	r1
 8da:	69 f7       	brne	.-38     	; 0x8b6 <__udivmodsi4_loop>
 8dc:	60 95       	com	r22
 8de:	70 95       	com	r23
 8e0:	80 95       	com	r24
 8e2:	90 95       	com	r25
 8e4:	9b 01       	movw	r18, r22
 8e6:	ac 01       	movw	r20, r24
 8e8:	bd 01       	movw	r22, r26
 8ea:	cf 01       	movw	r24, r30
 8ec:	08 95       	ret

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
