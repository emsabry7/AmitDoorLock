
Internal MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000005fa  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800094  00800094  000006c2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e40  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b37  00000000  00000000  000023ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00002ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a7  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000406  00000000  00000000  0000356f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 39       	cpi	r26, 0x99	; 153
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  8a:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Adc_Init>:

#include <avr/io.h>
#include "STDTypes.h"
void Adc_Init(void)
{
	ADMUX = (1<<REFS0); // set reference to vcc
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // set the prescaler to 64 , Enable the ADC 
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <Adc_Read>:

uint16_t Adc_Read(uint8_t Channel)
{	u16 Data;
	
	ADMUX |= (Channel & 0x07); // masking & set channel 
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	98 2b       	or	r25, r24
  a2:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC); // Start Conversion 
  a4:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1<<ADSC) ); // adsc = 6 .. wait until conversion is complete ( adsc=0)
  a6:	36 99       	sbic	0x06, 6	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <Adc_Read+0xa>
	Data = ADC;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	95 b1       	in	r25, 0x05	; 5
	return Data;
  ae:	08 95       	ret

000000b0 <Eeprom_Write>:
#include <avr/io.h>
#include "eeprom.h"

void Eeprom_Write (uint16_t address, uint8_t data) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  b0:	e1 99       	sbic	0x1c, 1	; 28
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <Eeprom_Write>
		;
	/* Set up address and data registers */
	EEAR = address;
  b4:	9f bb       	out	0x1f, r25	; 31
  b6:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  b8:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
  ba:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
  bc:	e1 9a       	sbi	0x1c, 1	; 28
}
  be:	08 95       	ret

000000c0 <Eeprom_Read>:

uint8_t Eeprom_Read (uint16_t address) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  c0:	e1 99       	sbic	0x1c, 1	; 28
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <Eeprom_Read>
		;
	/* Set up address register */
	EEAR = address;
  c4:	9f bb       	out	0x1f, r25	; 31
  c6:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  c8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  ca:	8d b3       	in	r24, 0x1d	; 29
  cc:	08 95       	ret

000000ce <Send_CheckResult>:
u8 PermissionFlag=0;
u8 InitMotorFlag=0;
u16 Temp;

void Send_CheckResult (u8 Result){
		CheckResult=Result;
  ce:	80 93 96 00 	sts	0x0096, r24
	if(CheckResult != WrongPass){
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	51 f0       	breq	.+20     	; 0xea <Send_CheckResult+0x1c>
		CheckResult=CorrectPass;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 96 00 	sts	0x0096, r24
		UART_OutChar(CheckResult);	//UART send MatchingResult (flag)
  dc:	0e 94 96 02 	call	0x52c	; 0x52c <UART_OutChar>
		PermissionFlag=CheckResult;	// permissionFlag=CorrectPass
  e0:	80 91 96 00 	lds	r24, 0x0096
  e4:	80 93 95 00 	sts	0x0095, r24
  e8:	08 95       	ret
	}
	else if (CheckResult==WrongPass){
		UART_OutChar(CheckResult);	//UART send MatchingResult (flag)
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 96 02 	call	0x52c	; 0x52c <UART_OutChar>
		PermissionFlag=CheckResult;	// permissionFlag=WrongPass
  f0:	80 91 96 00 	lds	r24, 0x0096
  f4:	80 93 95 00 	sts	0x0095, r24
		CheckResult=Reset;
  f8:	10 92 96 00 	sts	0x0096, r1
  fc:	08 95       	ret

000000fe <TempSensor_Init>:
	}
}
void TempSensor_Init(void){
	LCD_Init();
  fe:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_Init>
	Adc_Init();
 102:	0e 94 49 00 	call	0x92	; 0x92 <Adc_Init>
	Timer_Init();
 106:	0e 94 28 02 	call	0x450	; 0x450 <Timer_Init>
	LCD_GoToXY(0, 0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
	LCD_OutString("Temperature=");
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_OutString>
}
 11a:	08 95       	ret

0000011c <TempSensor_On>:
void TempSensor_On (void){
	LCD_GoToXY(0, 0);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
	LCD_OutString("Temperature=");
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_OutString>
	Temp= (Adc_Read(0)/2)-1;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 4e 00 	call	0x9c	; 0x9c <Adc_Read>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	90 93 98 00 	sts	0x0098, r25
 13c:	80 93 97 00 	sts	0x0097, r24
	LCD_OutUDec(Temp);
 140:	0e 94 01 02 	call	0x402	; 0x402 <LCD_OutUDec>
	LCD_OutString("c");
 144:	8d e6       	ldi	r24, 0x6D	; 109
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_OutString>
	Timer_Wait1ms(5);			
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 42 02 	call	0x484	; 0x484 <Timer_Wait1ms>
}
 154:	08 95       	ret

00000156 <Init_INT0>:
void Init_INT0(void){
	SREG |=0x80; // global int
 156:	8f b7       	in	r24, 0x3f	; 63
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	8f bf       	out	0x3f, r24	; 63
	MCUCR |=0x02;// rising edge confg int
 15c:	85 b7       	in	r24, 0x35	; 53
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 bf       	out	0x35, r24	; 53
	GICR |=0x40; //enable int0
 162:	8b b7       	in	r24, 0x3b	; 59
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8b bf       	out	0x3b, r24	; 59
	DDRD &=~0x04; //set pin 3 to 0 (i/p)
 168:	8a 98       	cbi	0x11, 2	; 17
	PIND &=0x7f;
 16a:	87 98       	cbi	0x10, 7	; 16
}
 16c:	08 95       	ret

0000016e <__vector_1>:
ISR (INT0_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	Pwm_Duty(0);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 1c 02 	call	0x438	; 0x438 <Pwm_Duty>
	LCD_GoToXY(1, 0);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
	LCD_OutString(" Motor Is OFF");
 19e:	8f e6       	ldi	r24, 0x6F	; 111
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_OutString>
	Timer_Wait1ms(5);
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 42 02 	call	0x484	; 0x484 <Timer_Wait1ms>
}	
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <MotorPWM_On>:
void MotorPWM_On (void){
	Pwm_Init();
 1d0:	0e 94 15 02 	call	0x42a	; 0x42a <Pwm_Init>
	Pwm_Duty(90);
 1d4:	8a e5       	ldi	r24, 0x5A	; 90
 1d6:	0e 94 1c 02 	call	0x438	; 0x438 <Pwm_Duty>
	LCD_GoToXY	(1, 0);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
	LCD_OutString("   Motor ON.. ");
 1e2:	8d e7       	ldi	r24, 0x7D	; 125
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_OutString>
	Timer_Wait1ms(5);		
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 42 02 	call	0x484	; 0x484 <Timer_Wait1ms>
}
 1f2:	08 95       	ret

000001f4 <main>:
int main(void){
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <main+0x6>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <main+0x8>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	
	u8 ReceivedPass[4];
		
	UART_Init ();
 200:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_Init>
	
	// setting password into the Eeprom
	Eeprom_Write (0,1); 
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (1,2); 
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (2,3); 
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (3,4);
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
    {
		////////////////////////////////
		////// Receiving Password  /////
		////////////////////////////////
		
		for (u8 i=0;i<4;i++) 
 22c:	10 e0       	ldi	r17, 0x00	; 0
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
			if (ReceivedPass[i]==Eeprom_Read(i))
				;
			else
				CheckResult=WrongPass; 
 22e:	02 e0       	ldi	r16, 0x02	; 2
 230:	0d c0       	rjmp	.+26     	; 0x24c <main+0x58>
		////////////////////////////////
		////// Receiving Password  /////
		////////////////////////////////
		
		for (u8 i=0;i<4;i++) 
			ReceivedPass[i]=UART_InChar()-'0';
 232:	0e 94 9a 02 	call	0x534	; 0x534 <UART_InChar>
 236:	e1 e0       	ldi	r30, 0x01	; 1
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ec 0f       	add	r30, r28
 23c:	fd 1f       	adc	r31, r29
 23e:	e1 0f       	add	r30, r17
 240:	f1 1d       	adc	r31, r1
 242:	80 53       	subi	r24, 0x30	; 48
 244:	80 83       	st	Z, r24
    {
		////////////////////////////////
		////// Receiving Password  /////
		////////////////////////////////
		
		for (u8 i=0;i<4;i++) 
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	01 c0       	rjmp	.+2      	; 0x24c <main+0x58>
 24a:	10 e0       	ldi	r17, 0x00	; 0
 24c:	14 30       	cpi	r17, 0x04	; 4
 24e:	88 f3       	brcs	.-30     	; 0x232 <main+0x3e>
 250:	6e 01       	movw	r12, r28
 252:	08 94       	sec
 254:	c1 1c       	adc	r12, r1
 256:	d1 1c       	adc	r13, r1
 258:	ee 24       	eor	r14, r14
 25a:	ff 24       	eor	r15, r15
		
		////////////////////////////////
		// Checking Password Matching //
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
			if (ReceivedPass[i]==Eeprom_Read(i))
 25c:	f6 01       	movw	r30, r12
 25e:	11 91       	ld	r17, Z+
 260:	6f 01       	movw	r12, r30
 262:	c7 01       	movw	r24, r14
 264:	0e 94 60 00 	call	0xc0	; 0xc0 <Eeprom_Read>
 268:	18 17       	cp	r17, r24
 26a:	11 f0       	breq	.+4      	; 0x270 <main+0x7c>
				;
			else
				CheckResult=WrongPass; 
 26c:	00 93 96 00 	sts	0x0096, r16
 270:	08 94       	sec
 272:	e1 1c       	adc	r14, r1
 274:	f1 1c       	adc	r15, r1
			ReceivedPass[i]=UART_InChar()-'0';
		
		////////////////////////////////
		// Checking Password Matching //
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
 276:	f4 e0       	ldi	r31, 0x04	; 4
 278:	ef 16       	cp	r14, r31
 27a:	f1 04       	cpc	r15, r1
 27c:	79 f7       	brne	.-34     	; 0x25c <main+0x68>
		}
		////////////////////////////////
		//////   Sending Flag   ////////
		////////////////////////////////
		
		Send_CheckResult(CheckResult);
 27e:	80 91 96 00 	lds	r24, 0x0096
 282:	0e 94 67 00 	call	0xce	; 0xce <Send_CheckResult>
		
		////////////////////////////////
		//// Turning On Functions   ////
		////////////////////////////////	
		
		if(PermissionFlag==CorrectPass){
 286:	80 91 95 00 	lds	r24, 0x0095
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	f1 f6       	brne	.-68     	; 0x24a <main+0x56>
			TempSensor_Init();
 28e:	0e 94 7f 00 	call	0xfe	; 0xfe <TempSensor_Init>
			Init_INT0();	// Enable Interrupt0 .. (MotorTerminator)
 292:	0e 94 ab 00 	call	0x156	; 0x156 <Init_INT0>
			MotorPWM_On ();	// motor turn on
 296:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MotorPWM_On>
			UART_OutChar(MotorInterruptFlag);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 96 02 	call	0x52c	; 0x52c <UART_OutChar>
			while(1)
				TempSensor_On (); 
 2a0:	0e 94 8e 00 	call	0x11c	; 0x11c <TempSensor_On>
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <main+0xac>

000002a6 <OutCmd>:
static u8 cursorPosition = 0x80;		// first row

// Private Function
static void OutCmd(u8 command) {
	// send Higher nibble
	LCD_DATA_PORT = command & 0xF0;
 2a6:	98 2f       	mov	r25, r24
 2a8:	90 7f       	andi	r25, 0xF0	; 240
 2aa:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 2ac:	98 b3       	in	r25, 0x18	; 24
 2ae:	91 7f       	andi	r25, 0xF1	; 241
 2b0:	98 bb       	out	0x18, r25	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 2b2:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 2b4:	98 b3       	in	r25, 0x18	; 24
 2b6:	91 7f       	andi	r25, 0xF1	; 241
 2b8:	98 bb       	out	0x18, r25	; 24
	
	// send Lower nibble
	// PORTB &= 0x0F;	// clear Data bits
	LCD_DATA_PORT = (command << 4);
 2ba:	82 95       	swap	r24
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	81 7f       	andi	r24, 0xF1	; 241
 2c4:	88 bb       	out	0x18, r24	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 2c6:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 2c8:	88 b3       	in	r24, 0x18	; 24
 2ca:	81 7f       	andi	r24, 0xF1	; 241
 2cc:	88 bb       	out	0x18, r24	; 24
	Timer_Wait(40);
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>
}
 2d6:	08 95       	ret

000002d8 <LCD_GoToXY>:
==========================
00 01 02 03 04	...	26 27
40 41 42 43 44	...	66 67
*/
void LCD_GoToXY(u8 row, u8 column) {
	if (row < MAX_ROWS && column < MAX_COLUMNS) {
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	50 f4       	brcc	.+20     	; 0x2f0 <LCD_GoToXY+0x18>
 2dc:	60 31       	cpi	r22, 0x10	; 16
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <LCD_GoToXY+0x18>
		if (row != 0) {
 2e0:	81 11       	cpse	r24, r1
			column += 0x40;	// move to the second row
 2e2:	60 5c       	subi	r22, 0xC0	; 192
		}
		cursorPosition = column + 0x80;
 2e4:	86 2f       	mov	r24, r22
 2e6:	80 58       	subi	r24, 0x80	; 128
 2e8:	80 93 8c 00 	sts	0x008C, r24
		OutCmd(cursorPosition);
 2ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
 2f0:	08 95       	ret

000002f2 <LCD_OutChar>:
	*/
}

void LCD_OutChar(u8 letter) {
	// letter is ASCII code
	LCD_CRL_PORT &= ~(RW);	// write enable
 2f2:	c2 98       	cbi	0x18, 2	; 24
	LCD_CRL_PORT |= (RS);	// for writing data
 2f4:	c1 9a       	sbi	0x18, 1	; 24
	/* send Higher nibble */
	LCD_DATA_PORT = letter & 0xF0;
 2f6:	98 2f       	mov	r25, r24
 2f8:	90 7f       	andi	r25, 0xF0	; 240
 2fa:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 2fc:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 2fe:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 300:	c3 98       	cbi	0x18, 3	; 24
	
	/* send Lower nibble */
	LCD_DATA_PORT = (letter << 4);
 302:	82 95       	swap	r24
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 308:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 30a:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 30c:	c3 98       	cbi	0x18, 3	; 24
	Timer_Wait(40); // 40 us wait
 30e:	88 e2       	ldi	r24, 0x28	; 40
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>
	
	/* check the cursor position */
	cursorPosition++;
 316:	80 91 8c 00 	lds	r24, 0x008C
 31a:	98 2f       	mov	r25, r24
 31c:	9f 5f       	subi	r25, 0xFF	; 255
 31e:	90 93 8c 00 	sts	0x008C, r25
	if(cursorPosition >= 0x80 + MAX_COLUMNS - 1 && cursorPosition < 0xC0) {
 322:	8e 58       	subi	r24, 0x8E	; 142
 324:	81 33       	cpi	r24, 0x31	; 49
 326:	40 f4       	brcc	.+16     	; 0x338 <LCD_OutChar+0x46>
		cursorPosition = 0xC0;
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	80 93 8c 00 	sts	0x008C, r24
		LCD_GoToXY(1, 0);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
 336:	08 95       	ret
	} else if (cursorPosition >= 0xC0 + MAX_COLUMNS -1) {
 338:	9f 3c       	cpi	r25, 0xCF	; 207
 33a:	38 f0       	brcs	.+14     	; 0x34a <LCD_OutChar+0x58>
		cursorPosition = 0x80;
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	80 93 8c 00 	sts	0x008C, r24
		LCD_GoToXY(0, 0);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
 34a:	08 95       	ret

0000034c <LCD_Clear>:
	}
}

void LCD_Clear(void) {
	cursorPosition = 0x80;
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	80 93 8c 00 	sts	0x008C, r24
	OutCmd(0x01);		// Clear Display
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	Timer_Wait(1600);	// 1.6 ms wait
 358:	80 e4       	ldi	r24, 0x40	; 64
 35a:	96 e0       	ldi	r25, 0x06	; 6
 35c:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>
// 	OutCmd(0x02); // Cursor to home
// 	Timer_Wait(1600); // 1.6 ms wait
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
	Timer_Wait(1600); // 1.6 ms wait
 368:	80 e4       	ldi	r24, 0x40	; 64
 36a:	96 e0       	ldi	r25, 0x06	; 6
 36c:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>
}
 370:	08 95       	ret

00000372 <LCD_Init>:
		OutCmd(cursorPosition);
	}
}

void LCD_Init (void) {
	DDRA |= 0xF0;	// Init LCD port as outputs
 372:	8a b3       	in	r24, 0x1a	; 26
 374:	80 6f       	ori	r24, 0xF0	; 240
 376:	8a bb       	out	0x1a, r24	; 26
	DDRB |= E | RS | RW;
 378:	87 b3       	in	r24, 0x17	; 23
 37a:	8e 60       	ori	r24, 0x0E	; 14
 37c:	87 bb       	out	0x17, r24	; 23
	Timer_Init(); // 1us TCNT
 37e:	0e 94 28 02 	call	0x450	; 0x450 <Timer_Init>
	/*** START INIT ***/
	Timer_Wait1ms(15); // 15 ms
 382:	8f e0       	ldi	r24, 0x0F	; 15
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 42 02 	call	0x484	; 0x484 <Timer_Wait1ms>
	OutCmd(0x03); // function set
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	Timer_Wait1ms(4); // 4 ms
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 42 02 	call	0x484	; 0x484 <Timer_Wait1ms>
	OutCmd(0x03); // second time
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	Timer_Wait(100); // 100us
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>
	OutCmd(0x03); // third time
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
		
	// now the busy flag could be read
	// 1. function set
	OutCmd(0x02);	// wasted as LCD initialized 8-bit by default
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	OutCmd(0x28); // 4bit, N=1 2line, F=0 5by7
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	// 2. Display off
	OutCmd(0x08); // D=0 display off, C=0 cursor off, B=0 blinking off
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	// 3. Display clear
	LCD_Clear();
 3be:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Clear>
	// 4. Entry mode Set
	OutCmd(0x06); // Entry mode, I/D=1 Increment, S=0 no display shift
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	OutCmd(0x80);	// Set RAM address
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	/*** END INIT ***/
 	OutCmd(0x0E); // D=1 display on, C=1 cursor on, B=0 blink off
 3ce:	8e e0       	ldi	r24, 0x0E	; 14
 3d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
 	OutCmd(0x10); // S/C=0 cursor move, R/L=0 shift left
 3d4:	80 e1       	ldi	r24, 0x10	; 16
 3d6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OutCmd>
	LCD_GoToXY(0, 0);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_GoToXY>
		0	0 Shifts the cursor position to the left. (AC is decremented by one.)
		0	1 Shifts the cursor position to the right. (AC is incremented by one.)
		1	0 Shifts the entire display to the left. The cursor follows the display shift.
		1	1 Shifts the entire display to the right. The cursor follows the display shift.
	*/
}
 3e2:	08 95       	ret

000003e4 <LCD_OutString>:
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
	while (*str) {
 3ea:	88 81       	ld	r24, Y
 3ec:	88 23       	and	r24, r24
 3ee:	31 f0       	breq	.+12     	; 0x3fc <LCD_OutString+0x18>
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 3f0:	21 96       	adiw	r28, 0x01	; 1
	while (*str) {
		LCD_OutChar(*str);
 3f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_OutChar>
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
	while (*str) {
 3f6:	89 91       	ld	r24, Y+
 3f8:	88 23       	and	r24, r24
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <LCD_OutString+0xe>
		LCD_OutChar(*str);
		str++;
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <LCD_OutUDec>:
void LCD_OutUDec(u16 n){
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	if (n >=10)
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	91 05       	cpc	r25, r1
 40a:	48 f0       	brcs	.+18     	; 0x41e <LCD_OutUDec+0x1c>
	{
		LCD_OutUDec( n/10 );
 40c:	6a e0       	ldi	r22, 0x0A	; 10
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 414:	d8 2f       	mov	r29, r24
 416:	cb 01       	movw	r24, r22
 418:	0e 94 01 02 	call	0x402	; 0x402 <LCD_OutUDec>
		n= n%10;
 41c:	8d 2f       	mov	r24, r29
	}
	LCD_OutChar(n+ '0');
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_OutChar>
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <Pwm_Init>:
// Timer 2
// phase correct PWM mode, non-inverting mode, pre scaler 256
// Input: none
// output: none
void Pwm_Init (void) {
	DDRD |= (1<<7);	// OC2 output
 42a:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS22) | (1<<CS21);
 42c:	85 b5       	in	r24, 0x25	; 37
 42e:	86 66       	ori	r24, 0x66	; 102
 430:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
 432:	8a e0       	ldi	r24, 0x0A	; 10
 434:	83 bd       	out	0x23, r24	; 35
}
 436:	08 95       	ret

00000438 <Pwm_Duty>:

// Input: duty in percentage
// output: none
void Pwm_Duty (uint8_t duty) {
	OCR2 = (uint8_t) (255 * duty / 100);
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	92 2f       	mov	r25, r18
 43e:	88 27       	eor	r24, r24
 440:	82 1b       	sub	r24, r18
 442:	93 0b       	sbc	r25, r19
 444:	64 e6       	ldi	r22, 0x64	; 100
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	0e 94 c6 02 	call	0x58c	; 0x58c <__divmodhi4>
 44c:	63 bd       	out	0x23, r22	; 35
 44e:	08 95       	ret

00000450 <Timer_Init>:
// ATmega32 at 8MHz
// Initialize TCNT to 1us
// Input: none
// Output: none
void Timer_Init (void){
	TCCR0 = 0x02;	// Normal Mode, Set pre-scaler at 8
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	83 bf       	out	0x33, r24	; 51
}
 454:	08 95       	ret

00000456 <Timer_Wait>:

// Input: delay time in 1us units
// Output: none
void Timer_Wait (u16 cycles) {
	TCNT0 = 0;
 456:	12 be       	out	0x32, r1	; 50
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 458:	49 2f       	mov	r20, r25
 45a:	55 27       	eor	r21, r21
 45c:	41 15       	cp	r20, r1
 45e:	51 05       	cpc	r21, r1
 460:	51 f0       	breq	.+20     	; 0x476 <Timer_Wait+0x20>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
		while (TCNT0 < 255)
 466:	62 b7       	in	r22, 0x32	; 50
 468:	6f 3f       	cpi	r22, 0xFF	; 255
 46a:	e9 f7       	brne	.-6      	; 0x466 <Timer_Wait+0x10>
// Input: delay time in 1us units
// Output: none
void Timer_Wait (u16 cycles) {
	TCNT0 = 0;
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 46c:	2f 5f       	subi	r18, 0xFF	; 255
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	24 17       	cp	r18, r20
 472:	35 07       	cpc	r19, r21
 474:	c1 f7       	brne	.-16     	; 0x466 <Timer_Wait+0x10>
		while (TCNT0 < 255)
			;
	while (TCNT0 <= cycles % 256)
 476:	90 70       	andi	r25, 0x00	; 0
 478:	22 b7       	in	r18, 0x32	; 50
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	d8 f7       	brcc	.-10     	; 0x478 <Timer_Wait+0x22>
		;
}
 482:	08 95       	ret

00000484 <Timer_Wait1ms>:

// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (u16 delay){
 484:	8f 92       	push	r8
 486:	9f 92       	push	r9
 488:	af 92       	push	r10
 48a:	bf 92       	push	r11
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
	u32 i;
	for (i = 0; i < (4 * delay); i++)
 494:	6c 01       	movw	r12, r24
 496:	cc 0c       	add	r12, r12
 498:	dd 1c       	adc	r13, r13
 49a:	cc 0c       	add	r12, r12
 49c:	dd 1c       	adc	r13, r13
 49e:	ee 24       	eor	r14, r14
 4a0:	ff 24       	eor	r15, r15
 4a2:	c1 14       	cp	r12, r1
 4a4:	d1 04       	cpc	r13, r1
 4a6:	e1 04       	cpc	r14, r1
 4a8:	f1 04       	cpc	r15, r1
 4aa:	89 f0       	breq	.+34     	; 0x4ce <Timer_Wait1ms+0x4a>
 4ac:	88 24       	eor	r8, r8
 4ae:	99 24       	eor	r9, r9
 4b0:	54 01       	movw	r10, r8
		Timer_Wait(250);
 4b2:	8a ef       	ldi	r24, 0xFA	; 250
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 2b 02 	call	0x456	; 0x456 <Timer_Wait>

// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (u16 delay){
	u32 i;
	for (i = 0; i < (4 * delay); i++)
 4ba:	08 94       	sec
 4bc:	81 1c       	adc	r8, r1
 4be:	91 1c       	adc	r9, r1
 4c0:	a1 1c       	adc	r10, r1
 4c2:	b1 1c       	adc	r11, r1
 4c4:	8c 14       	cp	r8, r12
 4c6:	9d 04       	cpc	r9, r13
 4c8:	ae 04       	cpc	r10, r14
 4ca:	bf 04       	cpc	r11, r15
 4cc:	90 f3       	brcs	.-28     	; 0x4b2 <Timer_Wait1ms+0x2e>
		Timer_Wait(250);
}
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	bf 90       	pop	r11
 4d8:	af 90       	pop	r10
 4da:	9f 90       	pop	r9
 4dc:	8f 90       	pop	r8
 4de:	08 95       	ret

000004e0 <UART_Init>:
#define F_CPU	8000000UL

// Initialize ATmega UART channel
void UART_Init (void) {
	// set baud rate
	uint16_t BR = ((F_CPU/16/UART_Config.baud)-1);
 4e0:	20 91 8d 00 	lds	r18, 0x008D
 4e4:	30 91 8e 00 	lds	r19, 0x008E
 4e8:	40 91 8f 00 	lds	r20, 0x008F
 4ec:	50 91 90 00 	lds	r21, 0x0090
 4f0:	60 e2       	ldi	r22, 0x20	; 32
 4f2:	71 ea       	ldi	r23, 0xA1	; 161
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__udivmodsi4>
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (uint8_t)(BR>>8);
 500:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8_t)BR;
 502:	29 b9       	out	0x09, r18	; 9
	// enable receiver and transmitter
	UCSRB = (1<<RXEN) | (1<<TXEN);
 504:	88 e1       	ldi	r24, 0x18	; 24
 506:	8a b9       	out	0x0a, r24	; 10
	// set frame format
	UCSRB |= ((UART_Config.charSize)>>3)<<UCSZ2;	// 9-bit character
 508:	2a b1       	in	r18, 0x0a	; 10
 50a:	80 91 91 00 	lds	r24, 0x0091
 50e:	98 2f       	mov	r25, r24
 510:	96 95       	lsr	r25
 512:	96 95       	lsr	r25
 514:	96 95       	lsr	r25
 516:	99 0f       	add	r25, r25
 518:	99 0f       	add	r25, r25
 51a:	92 2b       	or	r25, r18
 51c:	9a b9       	out	0x0a, r25	; 10
	UCSRC = (1<<URSEL) | ((UART_Config.charSize)&~(1<<3)) | UART_Config.stopBits;
 51e:	90 91 92 00 	lds	r25, 0x0092
 522:	90 68       	ori	r25, 0x80	; 128
 524:	87 77       	andi	r24, 0x77	; 119
 526:	89 2b       	or	r24, r25
 528:	80 bd       	out	0x20, r24	; 32
}
 52a:	08 95       	ret

0000052c <UART_OutChar>:

// wait for buffer to be empty,
// then output
void UART_OutChar (uint8_t data) {
	while ( !(UCSRA & (1<<UDRE)) )
 52c:	5d 9b       	sbis	0x0b, 5	; 11
 52e:	fe cf       	rjmp	.-4      	; 0x52c <UART_OutChar>
		;
	UDR = data;
 530:	8c b9       	out	0x0c, r24	; 12
}
 532:	08 95       	ret

00000534 <UART_InChar>:

// Wait for new input
// then return ASCII code
uint8_t UART_InChar(void) {
	while ( !(UCSRA & (1<<RXC)) )
 534:	5f 9b       	sbis	0x0b, 7	; 11
 536:	fe cf       	rjmp	.-4      	; 0x534 <UART_InChar>
		;
	return UDR;
 538:	8c b1       	in	r24, 0x0c	; 12
}
 53a:	08 95       	ret

0000053c <UART_OutWord>:

void UART_OutWord(uint16_t word) {
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
// 	UART_OutChar('0' + ((word / 1000) % 10));               /* Thousands */
// 	UART_OutChar('0' + ((word / 100) % 10));                 /* Hundreds */
// 	UART_OutChar('0' + ((word / 10) % 10));                      /* Tens */
// 	UART_OutChar('0' + (word % 10));                             /* Ones */
	
	if(word >= 10){
 540:	8a 30       	cpi	r24, 0x0A	; 10
 542:	91 05       	cpc	r25, r1
 544:	48 f0       	brcs	.+18     	; 0x558 <UART_OutWord+0x1c>
		UART_OutWord(word / 10);
 546:	6a e0       	ldi	r22, 0x0A	; 10
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 54e:	d8 2f       	mov	r29, r24
 550:	cb 01       	movw	r24, r22
 552:	0e 94 9e 02 	call	0x53c	; 0x53c <UART_OutWord>
		word = word % 10;
 556:	8d 2f       	mov	r24, r29
	}
	UART_OutChar(word + '0'); /* n is between 0 and 9 */
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	0e 94 96 02 	call	0x52c	; 0x52c <UART_OutChar>
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <__udivmodhi4>:
 564:	aa 1b       	sub	r26, r26
 566:	bb 1b       	sub	r27, r27
 568:	51 e1       	ldi	r21, 0x11	; 17
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__udivmodhi4_ep>

0000056c <__udivmodhi4_loop>:
 56c:	aa 1f       	adc	r26, r26
 56e:	bb 1f       	adc	r27, r27
 570:	a6 17       	cp	r26, r22
 572:	b7 07       	cpc	r27, r23
 574:	10 f0       	brcs	.+4      	; 0x57a <__udivmodhi4_ep>
 576:	a6 1b       	sub	r26, r22
 578:	b7 0b       	sbc	r27, r23

0000057a <__udivmodhi4_ep>:
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	5a 95       	dec	r21
 580:	a9 f7       	brne	.-22     	; 0x56c <__udivmodhi4_loop>
 582:	80 95       	com	r24
 584:	90 95       	com	r25
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	08 95       	ret

0000058c <__divmodhi4>:
 58c:	97 fb       	bst	r25, 7
 58e:	09 2e       	mov	r0, r25
 590:	07 26       	eor	r0, r23
 592:	0a d0       	rcall	.+20     	; 0x5a8 <__divmodhi4_neg1>
 594:	77 fd       	sbrc	r23, 7
 596:	04 d0       	rcall	.+8      	; 0x5a0 <__divmodhi4_neg2>
 598:	e5 df       	rcall	.-54     	; 0x564 <__udivmodhi4>
 59a:	06 d0       	rcall	.+12     	; 0x5a8 <__divmodhi4_neg1>
 59c:	00 20       	and	r0, r0
 59e:	1a f4       	brpl	.+6      	; 0x5a6 <__divmodhi4_exit>

000005a0 <__divmodhi4_neg2>:
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255

000005a6 <__divmodhi4_exit>:
 5a6:	08 95       	ret

000005a8 <__divmodhi4_neg1>:
 5a8:	f6 f7       	brtc	.-4      	; 0x5a6 <__divmodhi4_exit>
 5aa:	90 95       	com	r25
 5ac:	81 95       	neg	r24
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__udivmodsi4>:
 5b2:	a1 e2       	ldi	r26, 0x21	; 33
 5b4:	1a 2e       	mov	r1, r26
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	fd 01       	movw	r30, r26
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <__udivmodsi4_ep>

000005be <__udivmodsi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	ee 1f       	adc	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	a2 17       	cp	r26, r18
 5c8:	b3 07       	cpc	r27, r19
 5ca:	e4 07       	cpc	r30, r20
 5cc:	f5 07       	cpc	r31, r21
 5ce:	20 f0       	brcs	.+8      	; 0x5d8 <__udivmodsi4_ep>
 5d0:	a2 1b       	sub	r26, r18
 5d2:	b3 0b       	sbc	r27, r19
 5d4:	e4 0b       	sbc	r30, r20
 5d6:	f5 0b       	sbc	r31, r21

000005d8 <__udivmodsi4_ep>:
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	1a 94       	dec	r1
 5e2:	69 f7       	brne	.-38     	; 0x5be <__udivmodsi4_loop>
 5e4:	60 95       	com	r22
 5e6:	70 95       	com	r23
 5e8:	80 95       	com	r24
 5ea:	90 95       	com	r25
 5ec:	9b 01       	movw	r18, r22
 5ee:	ac 01       	movw	r20, r24
 5f0:	bd 01       	movw	r22, r26
 5f2:	cf 01       	movw	r24, r30
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
