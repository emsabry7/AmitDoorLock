
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001c4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000047e  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013e  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013a  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000146  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  8a:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_InitPortDirection>:
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	//check the required port, specified bits and direction on the Data Direction Register
	switch(PortName)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <DIO_InitPortDirection+0x26>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_InitPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b9 f0       	breq	.+46     	; 0xcc <DIO_InitPortDirection+0x3a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f5       	brne	.+80     	; 0xf2 <DIO_InitPortDirection+0x60>
  a2:	1e c0       	rjmp	.+60     	; 0xe0 <DIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	94 2f       	mov	r25, r20
  a8:	90 95       	com	r25
  aa:	89 23       	and	r24, r25
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	64 23       	and	r22, r20
  b2:	68 2b       	or	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
		}
		break;
  b6:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	94 2f       	mov	r25, r20
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	64 23       	and	r22, r20
  c6:	68 2b       	or	r22, r24
  c8:	67 bb       	out	0x17, r22	; 23
		}
		break;
  ca:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	94 2f       	mov	r25, r20
  d0:	90 95       	com	r25
  d2:	89 23       	and	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	64 23       	and	r22, r20
  da:	68 2b       	or	r22, r24
  dc:	64 bb       	out	0x14, r22	; 20
		}
		break;
  de:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	94 2f       	mov	r25, r20
  e4:	90 95       	com	r25
  e6:	89 23       	and	r24, r25
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	64 23       	and	r22, r20
  ee:	68 2b       	or	r22, r24
  f0:	61 bb       	out	0x11, r22	; 17
  f2:	08 95       	ret

000000f4 <DIO_WritePort>:
}

void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	//check the required port, specified bits and value on the Port Data Register
	switch(PortName)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	89 f0       	breq	.+34     	; 0x11a <DIO_WritePort+0x26>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_WritePort+0x12>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	b9 f0       	breq	.+46     	; 0x12e <DIO_WritePort+0x3a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	41 f5       	brne	.+80     	; 0x154 <DIO_WritePort+0x60>
 104:	1e c0       	rjmp	.+60     	; 0x142 <DIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	94 2f       	mov	r25, r20
 10a:	90 95       	com	r25
 10c:	89 23       	and	r24, r25
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	64 23       	and	r22, r20
 114:	68 2b       	or	r22, r24
 116:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 118:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	94 2f       	mov	r25, r20
 11e:	90 95       	com	r25
 120:	89 23       	and	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	64 23       	and	r22, r20
 128:	68 2b       	or	r22, r24
 12a:	68 bb       	out	0x18, r22	; 24
		}
		break;
 12c:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	94 2f       	mov	r25, r20
 132:	90 95       	com	r25
 134:	89 23       	and	r24, r25
 136:	85 bb       	out	0x15, r24	; 21
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	64 23       	and	r22, r20
 13c:	68 2b       	or	r22, r24
 13e:	65 bb       	out	0x15, r22	; 21
		}
		break;
 140:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortData,PortMask);
 142:	81 b3       	in	r24, 0x11	; 17
 144:	94 2f       	mov	r25, r20
 146:	90 95       	com	r25
 148:	89 23       	and	r24, r25
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	64 23       	and	r22, r20
 150:	68 2b       	or	r22, r24
 152:	61 bb       	out	0x11, r22	; 17
 154:	08 95       	ret

00000156 <DIO_ReadPort>:
u8 DIO_ReadPort(u8 PortName,u8 PortMask)
{
		u8 temp;
		 
	//check the required port, specified bits and value from the Port input Register
	switch(PortName)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	51 f0       	breq	.+20     	; 0x16e <DIO_ReadPort+0x18>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_ReadPort+0x12>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	49 f0       	breq	.+18     	; 0x174 <DIO_ReadPort+0x1e>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	61 f4       	brne	.+24     	; 0x17e <DIO_ReadPort+0x28>
 166:	09 c0       	rjmp	.+18     	; 0x17a <DIO_ReadPort+0x24>
	{	
		case PA:
		{
			temp=READ_REG(PINA,PortMask);
 168:	99 b3       	in	r25, 0x19	; 25
 16a:	96 23       	and	r25, r22
		}
		break;
 16c:	08 c0       	rjmp	.+16     	; 0x17e <DIO_ReadPort+0x28>
		case PB:
		{
			temp=READ_REG(PINB,PortMask);
 16e:	96 b3       	in	r25, 0x16	; 22
 170:	96 23       	and	r25, r22
		}
		break;
 172:	05 c0       	rjmp	.+10     	; 0x17e <DIO_ReadPort+0x28>
		case PC:
		{
			temp=READ_REG(PINC,PortMask);
 174:	93 b3       	in	r25, 0x13	; 19
 176:	96 23       	and	r25, r22
		}
		break;
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_ReadPort+0x28>
		case PD:
		{
			temp=READ_REG(PIND,PortMask);
 17a:	90 b3       	in	r25, 0x10	; 16
 17c:	96 23       	and	r25, r22
		}
		break;
	}

		return temp;
 17e:	89 2f       	mov	r24, r25
 180:	08 95       	ret

00000182 <__vector_1>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "DIO.h"

	ISR (INT0_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
	PORTD |=0x80;
 18c:	97 9a       	sbi	0x12, 7	; 18
	}
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:

int main(void)
{
	SREG |=0x80; // global int
 198:	8f b7       	in	r24, 0x3f	; 63
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	8f bf       	out	0x3f, r24	; 63
	MCUCR |=0x02;// rising edge conf int
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	85 bf       	out	0x35, r24	; 53
	GICR |=0x40; //enable int0
 1a4:	8b b7       	in	r24, 0x3b	; 59
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	8b bf       	out	0x3b, r24	; 59
	DIO_InitPortDirection(DDRD,0x04,0x04);
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	44 e0       	ldi	r20, 0x04	; 4
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_InitPortDirection>
	DIO_InitPortDirection(DDRD,0x80,0x80);
 1b4:	81 b3       	in	r24, 0x11	; 17
 1b6:	60 e8       	ldi	r22, 0x80	; 128
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_InitPortDirection>
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x26>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
