
Internal MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008e  0080008e  00000708  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00000e60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f57  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a7  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  0000261e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00003254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  000035a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000468  00000000  00000000  0000399a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00003e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  8a:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Adc_Init>:

#include <avr/io.h>
#include "STDTypes.h"
void Adc_Init(void)
{
	ADMUX = (1<<REFS0); // set reference to vcc
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // set the prescaler to 64 , Enable the ADC 
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <Adc_Read>:

uint16_t Adc_Read(uint8_t Channel)
{	u16 Data;
	
	ADMUX |= (Channel & 0x07); // masking & set channel 
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	98 2b       	or	r25, r24
  a2:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC); // Start Conversion 
  a4:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1<<ADSC) ); // adsc = 6 .. wait until conversion is complete ( adsc=0)
  a6:	36 99       	sbic	0x06, 6	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <Adc_Read+0xa>
	Data = ADC;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	95 b1       	in	r25, 0x05	; 5
	return Data;
  ae:	08 95       	ret

000000b0 <Eeprom_Write>:
#include <avr/io.h>
#include "eeprom.h"

void Eeprom_Write (uint16_t address, uint8_t data) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  b0:	e1 99       	sbic	0x1c, 1	; 28
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <Eeprom_Write>
		;
	/* Set up address and data registers */
	EEAR = address;
  b4:	9f bb       	out	0x1f, r25	; 31
  b6:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  b8:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
  ba:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
  bc:	e1 9a       	sbi	0x1c, 1	; 28
}
  be:	08 95       	ret

000000c0 <Eeprom_Read>:

uint8_t Eeprom_Read (uint16_t address) {
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  c0:	e1 99       	sbic	0x1c, 1	; 28
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <Eeprom_Read>
		;
	/* Set up address register */
	EEAR = address;
  c4:	9f bb       	out	0x1f, r25	; 31
  c6:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  c8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  ca:	8d b3       	in	r24, 0x1d	; 29
  cc:	08 95       	ret

000000ce <I2c_WaitIntFlag>:
// Slave Transmitter (ST) status codes
#define ST_SLA_ACK	 0xA8
#define ST_DATA_NACK	 0xAC0

static void I2c_WaitIntFlag (void) {
	while ( !(TWCR & (1<<TWINT)) );
  ce:	06 b6       	in	r0, 0x36	; 54
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <I2c_WaitIntFlag>
}
  d4:	08 95       	ret

000000d6 <I2c_Status>:
static void I2c_ClearIntFlag (void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
}

static uint8_t I2c_Status (void) {
	return (TWSR & 0xF8);
  d6:	81 b1       	in	r24, 0x01	; 1
}
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	08 95       	ret

000000dc <I2c_Init>:

void I2c_Init (void) {
	// Address of the slave, programmable
	TWAR = 0x20;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	82 b9       	out	0x02, r24	; 2
}
  e0:	08 95       	ret

000000e2 <I2c_Send1>:

int8_t I2c_Send1 (uint8_t data) {
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
	TWCR = (1<<TWEA) | (1<<TWEN);
  e6:	84 e4       	ldi	r24, 0x44	; 68
  e8:	86 bf       	out	0x36, r24	; 54
	/* Wait to be addressed */
	while (I2c_Status() != ST_SLA_ACK)
  ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2c_Status>
  ee:	88 3a       	cpi	r24, 0xA8	; 168
  f0:	e1 f7       	brne	.-8      	; 0xea <I2c_Send1+0x8>
		;
	TWDR = data;
  f2:	c3 b9       	out	0x03, r28	; 3
static void I2c_WaitIntFlag (void) {
	while ( !(TWCR & (1<<TWINT)) );
}

static void I2c_ClearIntFlag (void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
  f4:	84 e8       	ldi	r24, 0x84	; 132
  f6:	86 bf       	out	0x36, r24	; 54
	/* Wait to be addressed */
	while (I2c_Status() != ST_SLA_ACK)
		;
	TWDR = data;
	I2c_ClearIntFlag();
	I2c_WaitIntFlag();
  f8:	0e 94 67 00 	call	0xce	; 0xce <I2c_WaitIntFlag>
	if (I2c_Status() != ST_DATA_NACK)
  fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2c_Status>
		return -1;
		
	return 0;
}
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <I2c_Recv1>:

uint8_t I2c_Recv1 (void) {
	uint8_t data;
	TWCR = (1<<TWEA) | (1<<TWEN);
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	86 bf       	out	0x36, r24	; 54
	/* Wait to be addressed */
	while (I2c_Status() != SR_SLA_ACK)
 10a:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2c_Status>
 10e:	80 36       	cpi	r24, 0x60	; 96
 110:	e1 f7       	brne	.-8      	; 0x10a <I2c_Recv1+0x4>
		;
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
 112:	84 ec       	ldi	r24, 0xC4	; 196
 114:	86 bf       	out	0x36, r24	; 54
	I2c_WaitIntFlag();
 116:	0e 94 67 00 	call	0xce	; 0xce <I2c_WaitIntFlag>
	if (I2c_Status() != SR_DATA_ACK)
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2c_Status>
 11e:	80 38       	cpi	r24, 0x80	; 128
 120:	11 f4       	brne	.+4      	; 0x126 <I2c_Recv1+0x20>
		return 0;
	data = TWDR;
 122:	83 b1       	in	r24, 0x03	; 3
	return data;
 124:	08 95       	ret
	while (I2c_Status() != SR_SLA_ACK)
		;
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
	I2c_WaitIntFlag();
	if (I2c_Status() != SR_DATA_ACK)
		return 0;
 126:	80 e0       	ldi	r24, 0x00	; 0
	data = TWDR;
	return data;
 128:	08 95       	ret

0000012a <Send_CheckResult>:
u8 PermissionFlag=0;
u8 InitMotorFlag=0;
u16 Temp;

void Send_CheckResult (u8 CheckResult){
	if(CheckResult != WrongPass){
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	39 f0       	breq	.+14     	; 0x13c <Send_CheckResult+0x12>
		CheckResult=CorrectPass;
		UART_OutChar(CheckResult);	//UART send MatchingResult (flag)
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 bc 02 	call	0x578	; 0x578 <UART_OutChar>
		PermissionFlag=CheckResult;	// permissionFlag=CorrectPass
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 8f 00 	sts	0x008F, r24
 13a:	08 95       	ret
	}
	else if (CheckResult==WrongPass){
		UART_OutChar(CheckResult);	//UART send MatchingResult (flag)
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 bc 02 	call	0x578	; 0x578 <UART_OutChar>
		PermissionFlag=CheckResult;	// permissionFlag=WrongPass
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 8f 00 	sts	0x008F, r24
 148:	08 95       	ret

0000014a <TempSensor_Init>:
		CheckResult=Reset;
	}
}
void TempSensor_Init(void){
	LCD_Init();
 14a:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_Init>
	Adc_Init();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <Adc_Init>
	Timer_Init();
 152:	0e 94 4e 02 	call	0x49c	; 0x49c <Timer_Init>
	LCD_GoToXY(0, 0);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
	LCD_OutString("Temperature =");
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 18 02 	call	0x430	; 0x430 <LCD_OutString>
}
 166:	08 95       	ret

00000168 <TempSensor_On>:
void TempSensor_On (void){
	LCD_GoToXY(0, 0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
	LCD_OutString("Temperature =");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 18 02 	call	0x430	; 0x430 <LCD_OutString>
	Temp= (Adc_Read(0)/2)-1;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 4e 00 	call	0x9c	; 0x9c <Adc_Read>
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	90 93 91 00 	sts	0x0091, r25
 188:	80 93 90 00 	sts	0x0090, r24
	LCD_OutUDec(Temp);
 18c:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_OutUDec>
	Timer_Wait1ms(50);			
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer_Wait1ms>
}
 198:	08 95       	ret

0000019a <Init_INT0>:
void Init_INT0(void){
	SREG |=0x80; // global int
 19a:	8f b7       	in	r24, 0x3f	; 63
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	8f bf       	out	0x3f, r24	; 63
	MCUCR |=0x02;// rising edge conf int
 1a0:	85 b7       	in	r24, 0x35	; 53
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	85 bf       	out	0x35, r24	; 53
	GICR |=0x40; //enable int0
 1a6:	8b b7       	in	r24, 0x3b	; 59
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8b bf       	out	0x3b, r24	; 59
	DDRD &=~0x04; //set pin 3 to 0 (i/p)
 1ac:	8a 98       	cbi	0x11, 2	; 17
	PIND &=0x7f;
 1ae:	87 98       	cbi	0x10, 7	; 16
}
 1b0:	08 95       	ret

000001b2 <__vector_1>:
ISR (INT0_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	Pwm_Duty(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 42 02 	call	0x484	; 0x484 <Pwm_Duty>
	LCD_GoToXY(1, 0);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
	LCD_OutString("  Motor OFF ");
 1e2:	8e e6       	ldi	r24, 0x6E	; 110
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 18 02 	call	0x430	; 0x430 <LCD_OutString>
	Timer_Wait1ms(5);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer_Wait1ms>
}	
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <MotorPWMOn>:
void MotorPWMOn (void){
		Pwm_Init();
 214:	0e 94 3b 02 	call	0x476	; 0x476 <Pwm_Init>
		Pwm_Duty(90);
 218:	8a e5       	ldi	r24, 0x5A	; 90
 21a:	0e 94 42 02 	call	0x484	; 0x484 <Pwm_Duty>
		LCD_GoToXY(1, 0);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
		LCD_OutString("  Motor ON ");
 226:	8b e7       	ldi	r24, 0x7B	; 123
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 18 02 	call	0x430	; 0x430 <LCD_OutString>
		Timer_Wait1ms(5);		
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer_Wait1ms>
}
 236:	08 95       	ret

00000238 <main>:
int main(void){
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	00 d0       	rcall	.+0      	; 0x23e <main+0x6>
 23e:	00 d0       	rcall	.+0      	; 0x240 <main+0x8>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	
	u8 ReceivedPass[4];
	u8 CheckResult=0;
		
	UART_Init ();
 244:	0e 94 96 02 	call	0x52c	; 0x52c <UART_Init>
	
	// setting password into the Eeprom
	Eeprom_Write (0,1); 
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (1,2); 
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (2,3); 
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
	Eeprom_Write (3,4);
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	0e 94 58 00 	call	0xb0	; 0xb0 <Eeprom_Write>
		Timer_Wait1ms(5);		
}
int main(void){
	
	u8 ReceivedPass[4];
	u8 CheckResult=0;
 270:	00 e0       	ldi	r16, 0x00	; 0
	
	// setting password into the Eeprom
	Eeprom_Write (0,1); 
	Eeprom_Write (1,2); 
	Eeprom_Write (2,3); 
	Eeprom_Write (3,4);
 272:	4e 01       	movw	r8, r28
 274:	08 94       	sec
 276:	81 1c       	adc	r8, r1
 278:	91 1c       	adc	r9, r1
		Pwm_Duty(90);
		LCD_GoToXY(1, 0);
		LCD_OutString("  Motor ON ");
		Timer_Wait1ms(5);		
}
int main(void){
 27a:	0f 2e       	mov	r0, r31
 27c:	f5 e0       	ldi	r31, 0x05	; 5
 27e:	af 2e       	mov	r10, r31
 280:	bb 24       	eor	r11, r11
 282:	f0 2d       	mov	r31, r0
 284:	ac 0e       	add	r10, r28
 286:	bd 1e       	adc	r11, r29
 288:	68 2c       	mov	r6, r8
 28a:	59 2c       	mov	r5, r9
		for (u8 i=0;i<4;i++) {
			if (ReceivedPass[i]==Eeprom_Read(i)){
				;
			}
			else{
				CheckResult=WrongPass; //check result 
 28c:	77 24       	eor	r7, r7
 28e:	68 94       	set
 290:	71 f8       	bld	r7, 1
	
	// setting password into the Eeprom
	Eeprom_Write (0,1); 
	Eeprom_Write (1,2); 
	Eeprom_Write (2,3); 
	Eeprom_Write (3,4);
 292:	64 01       	movw	r12, r8
		Pwm_Duty(90);
		LCD_GoToXY(1, 0);
		LCD_OutString("  Motor ON ");
		Timer_Wait1ms(5);		
}
int main(void){
 294:	e6 2c       	mov	r14, r6
 296:	f5 2c       	mov	r15, r5
		////////////////////////////////
		////// Receiving Password  /////
		////////////////////////////////
		
		for (u8 i=0;i<4;i++) {
			ReceivedPass[i]=UART_InChar()-'0';
 298:	0e 94 c0 02 	call	0x580	; 0x580 <UART_InChar>
 29c:	80 53       	subi	r24, 0x30	; 48
 29e:	f7 01       	movw	r30, r14
 2a0:	81 93       	st	Z+, r24
 2a2:	7f 01       	movw	r14, r30
    {
		////////////////////////////////
		////// Receiving Password  /////
		////////////////////////////////
		
		for (u8 i=0;i<4;i++) {
 2a4:	ea 15       	cp	r30, r10
 2a6:	fb 05       	cpc	r31, r11
 2a8:	b9 f7       	brne	.-18     	; 0x298 <main+0x60>
 2aa:	ee 24       	eor	r14, r14
 2ac:	ff 24       	eor	r15, r15
		}
		////////////////////////////////
		// Checking Password Matching //
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
			if (ReceivedPass[i]==Eeprom_Read(i)){
 2ae:	f6 01       	movw	r30, r12
 2b0:	11 91       	ld	r17, Z+
 2b2:	6f 01       	movw	r12, r30
 2b4:	c7 01       	movw	r24, r14
 2b6:	0e 94 60 00 	call	0xc0	; 0xc0 <Eeprom_Read>
 2ba:	18 13       	cpse	r17, r24
				;
			}
			else{
				CheckResult=WrongPass; //check result 
 2bc:	07 2d       	mov	r16, r7
		}
		////////////////////////////////
		// Checking Password Matching //
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
			if (ReceivedPass[i]==Eeprom_Read(i)){
 2be:	08 94       	sec
 2c0:	e1 1c       	adc	r14, r1
 2c2:	f1 1c       	adc	r15, r1
			ReceivedPass[i]=UART_InChar()-'0';
		}
		////////////////////////////////
		// Checking Password Matching //
		////////////////////////////////
		for (u8 i=0;i<4;i++) {
 2c4:	f4 e0       	ldi	r31, 0x04	; 4
 2c6:	ef 16       	cp	r14, r31
 2c8:	f1 04       	cpc	r15, r1
 2ca:	89 f7       	brne	.-30     	; 0x2ae <main+0x76>
			}
		}
		////////////////////////////////
		//////   Sending Flag   ////////
		////////////////////////////////
		Send_CheckResult(CheckResult);
 2cc:	80 2f       	mov	r24, r16
 2ce:	0e 94 95 00 	call	0x12a	; 0x12a <Send_CheckResult>
		
		////////////////////////////////
		//// Turning On Functions   ////
		////////////////////////////////	
		
		if(PermissionFlag==CorrectPass){
 2d2:	80 91 8f 00 	lds	r24, 0x008F
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	e1 f6       	brne	.-72     	; 0x292 <main+0x5a>
			TempSensor_Init();
 2da:	0e 94 a5 00 	call	0x14a	; 0x14a <TempSensor_Init>
			Init_INT0();	
 2de:	0e 94 cd 00 	call	0x19a	; 0x19a <Init_INT0>
		/////////////// Temp Sensor Init////////////////
		
			MotorPWMOn ();	// motor turn on
 2e2:	0e 94 0a 01 	call	0x214	; 0x214 <MotorPWMOn>
			UART_OutChar(MotorInterruptFlag);
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 bc 02 	call	0x578	; 0x578 <UART_OutChar>
			while(1){
				TempSensor_On (); 
 2ec:	0e 94 b4 00 	call	0x168	; 0x168 <TempSensor_On>
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <main+0xb4>

000002f2 <OutCmd>:
static u8 cursorPosition = 0x80;		// first row

// Private Function
static void OutCmd(u8 command) {
	// send Higher nibble
	LCD_DATA_PORT = command & 0xF0;
 2f2:	98 2f       	mov	r25, r24
 2f4:	90 7f       	andi	r25, 0xF0	; 240
 2f6:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 2f8:	98 b3       	in	r25, 0x18	; 24
 2fa:	91 7f       	andi	r25, 0xF1	; 241
 2fc:	98 bb       	out	0x18, r25	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 2fe:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 300:	98 b3       	in	r25, 0x18	; 24
 302:	91 7f       	andi	r25, 0xF1	; 241
 304:	98 bb       	out	0x18, r25	; 24
	
	// send Lower nibble
	// PORTB &= 0x0F;	// clear Data bits
	LCD_DATA_PORT = (command << 4);
 306:	82 95       	swap	r24
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	81 7f       	andi	r24, 0xF1	; 241
 310:	88 bb       	out	0x18, r24	; 24
	LCD_CRL_PORT |= E;				// E=1, R/W=0, RS=0
 312:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E + RS + RW);	// E=0, R/W=0, RS=0
 314:	88 b3       	in	r24, 0x18	; 24
 316:	81 7f       	andi	r24, 0xF1	; 241
 318:	88 bb       	out	0x18, r24	; 24
	Timer_Wait(40);
 31a:	88 e2       	ldi	r24, 0x28	; 40
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>
}
 322:	08 95       	ret

00000324 <LCD_GoToXY>:
==========================
00 01 02 03 04	...	26 27
40 41 42 43 44	...	66 67
*/
void LCD_GoToXY(u8 row, u8 column) {
	if (row < MAX_ROWS && column < MAX_COLUMNS) {
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	50 f4       	brcc	.+20     	; 0x33c <LCD_GoToXY+0x18>
 328:	60 31       	cpi	r22, 0x10	; 16
 32a:	40 f4       	brcc	.+16     	; 0x33c <LCD_GoToXY+0x18>
		if (row != 0) {
 32c:	81 11       	cpse	r24, r1
			column += 0x40;	// move to the second row
 32e:	60 5c       	subi	r22, 0xC0	; 192
		}
		cursorPosition = column + 0x80;
 330:	86 2f       	mov	r24, r22
 332:	80 58       	subi	r24, 0x80	; 128
 334:	80 93 87 00 	sts	0x0087, r24
		OutCmd(cursorPosition);
 338:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
 33c:	08 95       	ret

0000033e <LCD_OutChar>:
	*/
}

void LCD_OutChar(u8 letter) {
	// letter is ASCII code
	LCD_CRL_PORT &= ~(RW);	// write enable
 33e:	c2 98       	cbi	0x18, 2	; 24
	LCD_CRL_PORT |= (RS);	// for writing data
 340:	c1 9a       	sbi	0x18, 1	; 24
	/* send Higher nibble */
	LCD_DATA_PORT = letter & 0xF0;
 342:	98 2f       	mov	r25, r24
 344:	90 7f       	andi	r25, 0xF0	; 240
 346:	9b bb       	out	0x1b, r25	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 348:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 34a:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 34c:	c3 98       	cbi	0x18, 3	; 24
	
	/* send Lower nibble */
	LCD_DATA_PORT = (letter << 4);
 34e:	82 95       	swap	r24
 350:	80 7f       	andi	r24, 0xF0	; 240
 352:	8b bb       	out	0x1b, r24	; 27
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 354:	c3 98       	cbi	0x18, 3	; 24
	LCD_CRL_PORT |= E; // E=1, R/W=0, RS=1
 356:	c3 9a       	sbi	0x18, 3	; 24
	LCD_CRL_PORT &= ~(E); // E=0, R/W=0, RS=1
 358:	c3 98       	cbi	0x18, 3	; 24
	Timer_Wait(40); // 40 us wait
 35a:	88 e2       	ldi	r24, 0x28	; 40
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>
	
	/* check the cursor position */
	cursorPosition++;
 362:	80 91 87 00 	lds	r24, 0x0087
 366:	98 2f       	mov	r25, r24
 368:	9f 5f       	subi	r25, 0xFF	; 255
 36a:	90 93 87 00 	sts	0x0087, r25
	if(cursorPosition >= 0x80 + MAX_COLUMNS - 1 && cursorPosition < 0xC0) {
 36e:	8e 58       	subi	r24, 0x8E	; 142
 370:	81 33       	cpi	r24, 0x31	; 49
 372:	40 f4       	brcc	.+16     	; 0x384 <LCD_OutChar+0x46>
		cursorPosition = 0xC0;
 374:	80 ec       	ldi	r24, 0xC0	; 192
 376:	80 93 87 00 	sts	0x0087, r24
		LCD_GoToXY(1, 0);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
 382:	08 95       	ret
	} else if (cursorPosition >= 0xC0 + MAX_COLUMNS -1) {
 384:	9f 3c       	cpi	r25, 0xCF	; 207
 386:	38 f0       	brcs	.+14     	; 0x396 <LCD_OutChar+0x58>
		cursorPosition = 0x80;
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	80 93 87 00 	sts	0x0087, r24
		LCD_GoToXY(0, 0);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
 396:	08 95       	ret

00000398 <LCD_Clear>:
	}
}

void LCD_Clear(void) {
	cursorPosition = 0x80;
 398:	80 e8       	ldi	r24, 0x80	; 128
 39a:	80 93 87 00 	sts	0x0087, r24
	OutCmd(0x01);		// Clear Display
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	Timer_Wait(1600);	// 1.6 ms wait
 3a4:	80 e4       	ldi	r24, 0x40	; 64
 3a6:	96 e0       	ldi	r25, 0x06	; 6
 3a8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>
// 	OutCmd(0x02); // Cursor to home
// 	Timer_Wait(1600); // 1.6 ms wait
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
	Timer_Wait(1600); // 1.6 ms wait
 3b4:	80 e4       	ldi	r24, 0x40	; 64
 3b6:	96 e0       	ldi	r25, 0x06	; 6
 3b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>
}
 3bc:	08 95       	ret

000003be <LCD_Init>:
		OutCmd(cursorPosition);
	}
}

void LCD_Init (void) {
	DDRA |= 0xF0;	// Init LCD port as outputs
 3be:	8a b3       	in	r24, 0x1a	; 26
 3c0:	80 6f       	ori	r24, 0xF0	; 240
 3c2:	8a bb       	out	0x1a, r24	; 26
	DDRB |= E | RS | RW;
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	8e 60       	ori	r24, 0x0E	; 14
 3c8:	87 bb       	out	0x17, r24	; 23
	Timer_Init(); // 1us TCNT
 3ca:	0e 94 4e 02 	call	0x49c	; 0x49c <Timer_Init>
	/*** START INIT ***/
	Timer_Wait1ms(15); // 15 ms
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer_Wait1ms>
	OutCmd(0x03); // function set
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	Timer_Wait1ms(4); // 4 ms
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer_Wait1ms>
	OutCmd(0x03); // second time
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	Timer_Wait(100); // 100us
 3ea:	84 e6       	ldi	r24, 0x64	; 100
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>
	OutCmd(0x03); // third time
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
		
	// now the busy flag could be read
	// 1. function set
	OutCmd(0x02);	// wasted as LCD initialized 8-bit by default
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	OutCmd(0x28); // 4bit, N=1 2line, F=0 5by7
 3fe:	88 e2       	ldi	r24, 0x28	; 40
 400:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	// 2. Display off
	OutCmd(0x08); // D=0 display off, C=0 cursor off, B=0 blinking off
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	// 3. Display clear
	LCD_Clear();
 40a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_Clear>
	// 4. Entry mode Set
	OutCmd(0x06); // Entry mode, I/D=1 Increment, S=0 no display shift
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	OutCmd(0x80);	// Set RAM address
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	/*** END INIT ***/
 	OutCmd(0x0E); // D=1 display on, C=1 cursor on, B=0 blink off
 41a:	8e e0       	ldi	r24, 0x0E	; 14
 41c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
 	OutCmd(0x10); // S/C=0 cursor move, R/L=0 shift left
 420:	80 e1       	ldi	r24, 0x10	; 16
 422:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OutCmd>
	LCD_GoToXY(0, 0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_GoToXY>
		0	0 Shifts the cursor position to the left. (AC is decremented by one.)
		0	1 Shifts the cursor position to the right. (AC is incremented by one.)
		1	0 Shifts the entire display to the left. The cursor follows the display shift.
		1	1 Shifts the entire display to the right. The cursor follows the display shift.
	*/
}
 42e:	08 95       	ret

00000430 <LCD_OutString>:
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
	while (*str) {
 436:	88 81       	ld	r24, Y
 438:	88 23       	and	r24, r24
 43a:	31 f0       	breq	.+12     	; 0x448 <LCD_OutString+0x18>
//	OutCmd(cursorPosition);
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
 43c:	21 96       	adiw	r28, 0x01	; 1
	while (*str) {
		LCD_OutChar(*str);
 43e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_OutChar>
	LCD_GoToXY(0, 0);
	Timer_Wait(1600); // 1.6 ms wait
}

void LCD_OutString (char *str) {
	while (*str) {
 442:	89 91       	ld	r24, Y+
 444:	88 23       	and	r24, r24
 446:	d9 f7       	brne	.-10     	; 0x43e <LCD_OutString+0xe>
		LCD_OutChar(*str);
		str++;
	}
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <LCD_OutUDec>:
void LCD_OutUDec(u16 n){
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
	if (n >=10)
 452:	8a 30       	cpi	r24, 0x0A	; 10
 454:	91 05       	cpc	r25, r1
 456:	48 f0       	brcs	.+18     	; 0x46a <LCD_OutUDec+0x1c>
	{
		LCD_OutUDec( n/10 );
 458:	6a e0       	ldi	r22, 0x0A	; 10
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodhi4>
 460:	d8 2f       	mov	r29, r24
 462:	cb 01       	movw	r24, r22
 464:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_OutUDec>
		n= n%10;
 468:	8d 2f       	mov	r24, r29
	}
	LCD_OutChar(n+ '0');
 46a:	80 5d       	subi	r24, 0xD0	; 208
 46c:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_OutChar>
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <Pwm_Init>:
// Timer 2
// phase correct PWM mode, non-inverting mode, pre scaler 256
// Input: none
// output: none
void Pwm_Init (void) {
	DDRD |= (1<<7);	// OC2 output
 476:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS22) | (1<<CS21);
 478:	85 b5       	in	r24, 0x25	; 37
 47a:	86 66       	ori	r24, 0x66	; 102
 47c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
 47e:	8a e0       	ldi	r24, 0x0A	; 10
 480:	83 bd       	out	0x23, r24	; 35
}
 482:	08 95       	ret

00000484 <Pwm_Duty>:

// Input: duty in percentage
// output: none
void Pwm_Duty (uint8_t duty) {
	OCR2 = (uint8_t) (255 * duty / 100);
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	92 2f       	mov	r25, r18
 48a:	88 27       	eor	r24, r24
 48c:	82 1b       	sub	r24, r18
 48e:	93 0b       	sbc	r25, r19
 490:	64 e6       	ldi	r22, 0x64	; 100
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 498:	63 bd       	out	0x23, r22	; 35
 49a:	08 95       	ret

0000049c <Timer_Init>:
// ATmega32 at 8MHz
// Initialize TCNT to 1us
// Input: none
// Output: none
void Timer_Init (void){
	TCCR0 = 0x02;	// Normal Mode, Set pre-scaler at 8
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	83 bf       	out	0x33, r24	; 51
}
 4a0:	08 95       	ret

000004a2 <Timer_Wait>:

// Input: delay time in 1us units
// Output: none
void Timer_Wait (u16 cycles) {
	TCNT0 = 0;
 4a2:	12 be       	out	0x32, r1	; 50
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 4a4:	49 2f       	mov	r20, r25
 4a6:	55 27       	eor	r21, r21
 4a8:	41 15       	cp	r20, r1
 4aa:	51 05       	cpc	r21, r1
 4ac:	51 f0       	breq	.+20     	; 0x4c2 <Timer_Wait+0x20>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
		while (TCNT0 < 255)
 4b2:	62 b7       	in	r22, 0x32	; 50
 4b4:	6f 3f       	cpi	r22, 0xFF	; 255
 4b6:	e9 f7       	brne	.-6      	; 0x4b2 <Timer_Wait+0x10>
// Input: delay time in 1us units
// Output: none
void Timer_Wait (u16 cycles) {
	TCNT0 = 0;
	u16 i;
	for (i = 0 ; i < (cycles / 256) ; i++)
 4b8:	2f 5f       	subi	r18, 0xFF	; 255
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	24 17       	cp	r18, r20
 4be:	35 07       	cpc	r19, r21
 4c0:	c1 f7       	brne	.-16     	; 0x4b2 <Timer_Wait+0x10>
		while (TCNT0 < 255)
			;
	while (TCNT0 <= cycles % 256)
 4c2:	90 70       	andi	r25, 0x00	; 0
 4c4:	22 b7       	in	r18, 0x32	; 50
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	82 17       	cp	r24, r18
 4ca:	93 07       	cpc	r25, r19
 4cc:	d8 f7       	brcc	.-10     	; 0x4c4 <Timer_Wait+0x22>
		;
}
 4ce:	08 95       	ret

000004d0 <Timer_Wait1ms>:

// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (u16 delay){
 4d0:	8f 92       	push	r8
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
	u32 i;
	for (i = 0; i < (4 * delay); i++)
 4e0:	6c 01       	movw	r12, r24
 4e2:	cc 0c       	add	r12, r12
 4e4:	dd 1c       	adc	r13, r13
 4e6:	cc 0c       	add	r12, r12
 4e8:	dd 1c       	adc	r13, r13
 4ea:	ee 24       	eor	r14, r14
 4ec:	ff 24       	eor	r15, r15
 4ee:	c1 14       	cp	r12, r1
 4f0:	d1 04       	cpc	r13, r1
 4f2:	e1 04       	cpc	r14, r1
 4f4:	f1 04       	cpc	r15, r1
 4f6:	89 f0       	breq	.+34     	; 0x51a <Timer_Wait1ms+0x4a>
 4f8:	88 24       	eor	r8, r8
 4fa:	99 24       	eor	r9, r9
 4fc:	54 01       	movw	r10, r8
		Timer_Wait(250);
 4fe:	8a ef       	ldi	r24, 0xFA	; 250
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timer_Wait>

// Input: delay time in 1ms units
// Output: none
void Timer_Wait1ms (u16 delay){
	u32 i;
	for (i = 0; i < (4 * delay); i++)
 506:	08 94       	sec
 508:	81 1c       	adc	r8, r1
 50a:	91 1c       	adc	r9, r1
 50c:	a1 1c       	adc	r10, r1
 50e:	b1 1c       	adc	r11, r1
 510:	8c 14       	cp	r8, r12
 512:	9d 04       	cpc	r9, r13
 514:	ae 04       	cpc	r10, r14
 516:	bf 04       	cpc	r11, r15
 518:	90 f3       	brcs	.-28     	; 0x4fe <Timer_Wait1ms+0x2e>
		Timer_Wait(250);
}
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	bf 90       	pop	r11
 524:	af 90       	pop	r10
 526:	9f 90       	pop	r9
 528:	8f 90       	pop	r8
 52a:	08 95       	ret

0000052c <UART_Init>:
#define F_CPU	8000000UL

// Initialize ATmega UART channel
void UART_Init (void) {
	// set baud rate
	uint16_t BR = ((F_CPU/16/UART_Config.baud)-1);
 52c:	20 91 88 00 	lds	r18, 0x0088
 530:	30 91 89 00 	lds	r19, 0x0089
 534:	40 91 8a 00 	lds	r20, 0x008A
 538:	50 91 8b 00 	lds	r21, 0x008B
 53c:	60 e2       	ldi	r22, 0x20	; 32
 53e:	71 ea       	ldi	r23, 0xA1	; 161
 540:	87 e0       	ldi	r24, 0x07	; 7
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodsi4>
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (uint8_t)(BR>>8);
 54c:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8_t)BR;
 54e:	29 b9       	out	0x09, r18	; 9
	// enable receiver and transmitter
	UCSRB = (1<<RXEN) | (1<<TXEN);
 550:	88 e1       	ldi	r24, 0x18	; 24
 552:	8a b9       	out	0x0a, r24	; 10
	// set frame format
	UCSRB |= ((UART_Config.charSize)>>3)<<UCSZ2;	// 9-bit character
 554:	2a b1       	in	r18, 0x0a	; 10
 556:	80 91 8c 00 	lds	r24, 0x008C
 55a:	98 2f       	mov	r25, r24
 55c:	96 95       	lsr	r25
 55e:	96 95       	lsr	r25
 560:	96 95       	lsr	r25
 562:	99 0f       	add	r25, r25
 564:	99 0f       	add	r25, r25
 566:	92 2b       	or	r25, r18
 568:	9a b9       	out	0x0a, r25	; 10
	UCSRC = (1<<URSEL) | ((UART_Config.charSize)&~(1<<3)) | UART_Config.stopBits;
 56a:	90 91 8d 00 	lds	r25, 0x008D
 56e:	90 68       	ori	r25, 0x80	; 128
 570:	87 77       	andi	r24, 0x77	; 119
 572:	89 2b       	or	r24, r25
 574:	80 bd       	out	0x20, r24	; 32
}
 576:	08 95       	ret

00000578 <UART_OutChar>:

// wait for buffer to be empty,
// then output
void UART_OutChar (uint8_t data) {
	while ( !(UCSRA & (1<<UDRE)) )
 578:	5d 9b       	sbis	0x0b, 5	; 11
 57a:	fe cf       	rjmp	.-4      	; 0x578 <UART_OutChar>
		;
	UDR = data;
 57c:	8c b9       	out	0x0c, r24	; 12
}
 57e:	08 95       	ret

00000580 <UART_InChar>:

// Wait for new input
// then return ASCII code
uint8_t UART_InChar(void) {
	while ( !(UCSRA & (1<<RXC)) )
 580:	5f 9b       	sbis	0x0b, 7	; 11
 582:	fe cf       	rjmp	.-4      	; 0x580 <UART_InChar>
		;
	return UDR;
 584:	8c b1       	in	r24, 0x0c	; 12
}
 586:	08 95       	ret

00000588 <UART_OutWord>:

void UART_OutWord(uint16_t word) {
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
// 	UART_OutChar('0' + ((word / 1000) % 10));               /* Thousands */
// 	UART_OutChar('0' + ((word / 100) % 10));                 /* Hundreds */
// 	UART_OutChar('0' + ((word / 10) % 10));                      /* Tens */
// 	UART_OutChar('0' + (word % 10));                             /* Ones */
	
	if(word >= 10){
 58c:	8a 30       	cpi	r24, 0x0A	; 10
 58e:	91 05       	cpc	r25, r1
 590:	48 f0       	brcs	.+18     	; 0x5a4 <UART_OutWord+0x1c>
		UART_OutWord(word / 10);
 592:	6a e0       	ldi	r22, 0x0A	; 10
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodhi4>
 59a:	d8 2f       	mov	r29, r24
 59c:	cb 01       	movw	r24, r22
 59e:	0e 94 c4 02 	call	0x588	; 0x588 <UART_OutWord>
		word = word % 10;
 5a2:	8d 2f       	mov	r24, r29
	}
	UART_OutChar(word + '0'); /* n is between 0 and 9 */
 5a4:	80 5d       	subi	r24, 0xD0	; 208
 5a6:	0e 94 bc 02 	call	0x578	; 0x578 <UART_OutChar>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <__udivmodhi4>:
 5b0:	aa 1b       	sub	r26, r26
 5b2:	bb 1b       	sub	r27, r27
 5b4:	51 e1       	ldi	r21, 0x11	; 17
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__udivmodhi4_ep>

000005b8 <__udivmodhi4_loop>:
 5b8:	aa 1f       	adc	r26, r26
 5ba:	bb 1f       	adc	r27, r27
 5bc:	a6 17       	cp	r26, r22
 5be:	b7 07       	cpc	r27, r23
 5c0:	10 f0       	brcs	.+4      	; 0x5c6 <__udivmodhi4_ep>
 5c2:	a6 1b       	sub	r26, r22
 5c4:	b7 0b       	sbc	r27, r23

000005c6 <__udivmodhi4_ep>:
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	5a 95       	dec	r21
 5cc:	a9 f7       	brne	.-22     	; 0x5b8 <__udivmodhi4_loop>
 5ce:	80 95       	com	r24
 5d0:	90 95       	com	r25
 5d2:	bc 01       	movw	r22, r24
 5d4:	cd 01       	movw	r24, r26
 5d6:	08 95       	ret

000005d8 <__divmodhi4>:
 5d8:	97 fb       	bst	r25, 7
 5da:	09 2e       	mov	r0, r25
 5dc:	07 26       	eor	r0, r23
 5de:	0a d0       	rcall	.+20     	; 0x5f4 <__divmodhi4_neg1>
 5e0:	77 fd       	sbrc	r23, 7
 5e2:	04 d0       	rcall	.+8      	; 0x5ec <__divmodhi4_neg2>
 5e4:	e5 df       	rcall	.-54     	; 0x5b0 <__udivmodhi4>
 5e6:	06 d0       	rcall	.+12     	; 0x5f4 <__divmodhi4_neg1>
 5e8:	00 20       	and	r0, r0
 5ea:	1a f4       	brpl	.+6      	; 0x5f2 <__divmodhi4_exit>

000005ec <__divmodhi4_neg2>:
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255

000005f2 <__divmodhi4_exit>:
 5f2:	08 95       	ret

000005f4 <__divmodhi4_neg1>:
 5f4:	f6 f7       	brtc	.-4      	; 0x5f2 <__divmodhi4_exit>
 5f6:	90 95       	com	r25
 5f8:	81 95       	neg	r24
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	08 95       	ret

000005fe <__udivmodsi4>:
 5fe:	a1 e2       	ldi	r26, 0x21	; 33
 600:	1a 2e       	mov	r1, r26
 602:	aa 1b       	sub	r26, r26
 604:	bb 1b       	sub	r27, r27
 606:	fd 01       	movw	r30, r26
 608:	0d c0       	rjmp	.+26     	; 0x624 <__udivmodsi4_ep>

0000060a <__udivmodsi4_loop>:
 60a:	aa 1f       	adc	r26, r26
 60c:	bb 1f       	adc	r27, r27
 60e:	ee 1f       	adc	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	a2 17       	cp	r26, r18
 614:	b3 07       	cpc	r27, r19
 616:	e4 07       	cpc	r30, r20
 618:	f5 07       	cpc	r31, r21
 61a:	20 f0       	brcs	.+8      	; 0x624 <__udivmodsi4_ep>
 61c:	a2 1b       	sub	r26, r18
 61e:	b3 0b       	sbc	r27, r19
 620:	e4 0b       	sbc	r30, r20
 622:	f5 0b       	sbc	r31, r21

00000624 <__udivmodsi4_ep>:
 624:	66 1f       	adc	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	1a 94       	dec	r1
 62e:	69 f7       	brne	.-38     	; 0x60a <__udivmodsi4_loop>
 630:	60 95       	com	r22
 632:	70 95       	com	r23
 634:	80 95       	com	r24
 636:	90 95       	com	r25
 638:	9b 01       	movw	r18, r22
 63a:	ac 01       	movw	r20, r24
 63c:	bd 01       	movw	r22, r26
 63e:	cf 01       	movw	r24, r30
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
